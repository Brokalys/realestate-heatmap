{"version":3,"sources":["pages/Daily.js"],"names":["Daily","state","lastDrawLocation","series","fetch","response","text","csvData","data","parse","num","this","setState","title","splice","map","row","y","parseInt","x","_this2","loadData","_this$state","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","react_vis__WEBPACK_IMPORTED_MODULE_8__","width","items","animation","xDomain","left","right","height","entry","key","onClick","React","Component"],"mappings":"gQAWMA,6MAEJC,MAAQ,CACNC,iBAAkB,KAClBC,OAAQ,kNAIeC,MAAM,4FAAvBC,kBACgBA,EAASC,cAAzBC,SACAC,EAAOC,IAAMF,GAEfG,EAAM,EACVC,KAAKC,SAAS,CACZT,OAAQ,CAAC,CACPU,MAAO,OACPL,KAAMA,EAAKM,OAAO,GAAGC,IAAI,SAACC,GAAD,MAAU,CACjCC,EAAGC,SAASF,EAAI,GAAI,IACpBG,EAAGT,8IAMF,IAAAU,EAAAT,KACPA,KAAKU,WADE,IAAAC,EAG4BX,KAAKV,MAAjCE,EAHAmB,EAGAnB,OAAQD,EAHRoB,EAGQpB,iBACf,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,MAAO,IACPC,MAAO1B,KAGXoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEG,WAAS,EACTC,QAAS7B,GAAoB,CAACA,EAAiB8B,KAAM9B,EAAiB+B,OACtEC,OAAQ,KAERX,EAAAC,EAAAC,cAACE,EAAA,EAAD,MAEAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,MAECxB,EAAOY,IAAI,SAAAoB,GAAK,OACfZ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACES,IAAKD,EAAMtB,MACXL,KAAM2B,EAAM3B,WAOpBe,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBW,QAAS,WAC3CjB,EAAKR,SAAS,CAACV,iBAAkB,SADnC,sBAzDYoC,IAAMC,WAoEXvC","file":"static/js/3.5608a463.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  FlexibleWidthXYPlot,\n  LineSeries,\n  DiscreteColorLegend\n} from 'react-vis';\nimport parse from 'csv-parse/lib/es5/sync';\n\nclass Daily extends React.Component {\n\n  state = {\n    lastDrawLocation: null,\n    series: []\n  }\n\n  async loadData() {\n    const response = await fetch('https://raw.githubusercontent.com/brokalys/data/master/data/daily-sell.csv');\n    const csvData = await response.text();\n    const data = parse(csvData);\n\n    let num = 0;\n    this.setState({\n      series: [{\n        title: 'test',\n        data: data.splice(1).map((row) => ({\n          y: parseInt(row[5], 10),\n          x: num++,\n        })),\n      }],\n    });\n  }\n\n  render() {\n    this.loadData();\n\n    const {series, lastDrawLocation} = this.state;\n    return (\n      <div className=\"example-with-click-me\">\n        <div className=\"legend\">\n          <DiscreteColorLegend\n            width={180}\n            items={series}/>\n        </div>\n\n        <div className=\"chart no-select\">\n          <FlexibleWidthXYPlot\n            animation\n            xDomain={lastDrawLocation && [lastDrawLocation.left, lastDrawLocation.right]}\n            height={300}>\n\n            <HorizontalGridLines />\n\n            <YAxis />\n            <XAxis />\n\n            {series.map(entry => (\n              <LineSeries\n                key={entry.title}\n                data={entry.data}\n              />\n            ))}\n\n          </FlexibleWidthXYPlot>\n        </div>\n\n        <button className=\"showcase-button\" onClick={() => {\n          this.setState({lastDrawLocation: null});\n        }}>\n          Reset Zoom\n        </button>\n      </div>\n    );\n  }\n\n}\n\nexport default Daily;\n"],"sourceRoot":""}