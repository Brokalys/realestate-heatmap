{"version":3,"sources":["App.module.css","containers/SplitPaneLeft/SplitPaneLeft.module.css","components/MapOverlay/components/AreaOverview.module.css","components/Navigation/Navigation.module.css","components/PropertyPriceChart/PropertyPriceChart.module.css","components/MapOverlay/components/PropertyPriceLine.module.css","components/MapOverlay/components/PropertyTypeChart.module.css","components/MapOverlay/MapOverlay.module.css","components/FilterToolbar/FilterToolbar.module.css","containers/SplitPaneRight/SplitPaneRight.module.css","containers/CurrentMonthOverview/CurrentMonthOverview.module.css","apollo-client.js","context/FilterContext.js","components/FilterToolbar/FilterToolbar.jsx","components/FilterToolbar/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","hooks/use-brokalys-static-api.js","components/PropertyPriceChart/PropertyPriceChart.jsx","components/PropertyPriceChart/index.js","containers/CurrentMonthOverview/CurrentMonthOverview.jsx","containers/CurrentMonthOverview/index.js","containers/SplitPaneLeft/SplitPaneLeft.jsx","containers/SplitPaneLeft/index.js","context/MapContext.js","components/Map/Map.jsx","components/Map/index.js","hooks/use-debounced-query.js","components/MapOverlay/components/AreaOverview.jsx","components/MapOverlay/components/PropertyPriceLine.jsx","components/MapOverlay/components/PropertyTypeChart.jsx","components/MapOverlay/MapOverlay.jsx","components/MapOverlay/index.js","containers/SplitPaneRight/SplitPaneRight.jsx","containers/SplitPaneRight/index.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","FilterContext","React","createContext","FilterToolbar","context","useContext","className","styles","container","Menu","secondary","Item","fitted","Dropdown","placeholder","search","all","selected","regexp","RegExp","transliterate","filter","row","test","text","selection","defaultValue","location","default","options","onChange","event","data","setSelected","value","fluid","category","type","Navigation","Header","src","alt","height","position","Popup","content","inverted","trigger","href","target","rel","notificationLink","Icon","name","shake","Button","primary","animated","onClick","window","Content","visible","hidden","useBrokalysStaticApi","useAxios","loading","error","csvString","useMemo","csv","parse","priceIndex","shift","findIndex","map","start","end","price","PropertyPriceChart","responseData","id","x","y","Message","negative","Segment","basic","Dimmer","active","Loader","margin","top","right","bottom","left","xScale","format","precision","xFormat","yScale","stacked","sliceTooltip","slice","tooltip","points","point","key","moment","serieId","Number","yFormatted","toLocaleString","minimumFractionDigits","axisBottom","tickValues","tickRotation","enablePoints","curve","useMesh","enableSlices","GET_MEDIAN_PRICE","gql","currentMonth","utc","clone","startOf","MedianPrice","median","momChange","priceChange","mom","yoyChange","yoy","statisticAddon","isFinite","textGreen","textRed","toFixed","parseInt","PropertyCount","count","current_month","summary","last_month","last_year","RentalYieldValue","useLastPrice","rentLoading","rentPrice","sellLoading","sellPrice","useRentalYield","Statistic","Value","last","length","CurrentMonthOverview","lastMonth","monthBefore","yearAgo","useCurrentMonthStatistics","loadingPrice","dataPrice","useQuery","variables","current_month_start","toISOString","last_month_start","subtract","last_month_end","add","last_year_start","last_year_end","region","selectedRegion","as","Group","size","Label","locationOptions","rigaGeojson","features","properties","apkaime","categoryOptions","typeOptions","coordinatesToRegion","coordinates","parts","push","join","SplitPaneLeft","useState","find","geometry","setFilterState","state","filterState","Provider","highlightedText","MapContext","Map","props","bootstrapURLKeys","process","defaultCenter","lat","lng","defaultZoom","disableDefaultUI","bounds","mapHeight","percentage","document","getElementById","offsetTop","newBounds","nw","ne","sw","se","setBounds","useDebouncedQuery","query","nextConfig","time","nextConfigStr","JSON","stringify","debouncedIsLoading","setDebouncedLoading","undefined","previousData","setPreviousData","useDebounce","equalityFn","prev","next","config","useLazyQuery","performLazyQuery","useDebouncedCallback","performDebouncedQuery","useEffect","AreaOverview","children","year","currency","amount","label","extendMoment","Moment","range","Date","dates","Array","from","by","excludeEnd","transformResponse","date","index","PropertyPriceLine","endOf","custom","colors","axisLeft","enable","tickSize","enableGridX","enableGridY","defaultColors","normalizeChartData","land_count","house_count","apartment_count","PropertyTypeChart","startDate","setColors","title","layout","enableLabel","keys","indexBy","animate","padding","newColors","PriceLabel","MapOverlay","isLoading","Grid","Column","computer","convertBoundsToRegionString","SplitPaneRight","setMapState","mapState","App","Container","grid","leftPanel","rightPanel","Boolean","hostname","match","ReactDOM","render","StrictMode","ApolloProvider","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1df8a1f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"grid\":\"App_grid__3DnSg\",\"leftPanel\":\"App_leftPanel__3Hl9k\",\"rightPanel\":\"App_rightPanel__kN-EW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"SplitPaneLeft_content__4SUVj\",\"highlightedText\":\"SplitPaneLeft_highlightedText__2q005\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currency\":\"AreaOverview_currency__1aglq\",\"label\":\"AreaOverview_label__1Cauv\",\"amount\":\"AreaOverview_amount__KkYcy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shake\":\"Navigation_shake__1loJY\",\"bell-shake\":\"Navigation_bell-shake__28FvC\",\"notificationLink\":\"Navigation_notificationLink__dwBb-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceChart_container__b6m2Q\",\"tooltip\":\"PropertyPriceChart_tooltip__iGhsd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceLine_container__3NyhK\",\"tooltip\":\"PropertyPriceLine_tooltip__1tDKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyTypeChart_container__3smv6\",\"title\":\"PropertyTypeChart_title__1REaR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MapOverlay_container__16kzn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterToolbar_container__3xqZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SplitPaneRight_container__x3kzx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticAddon\":\"CurrentMonthOverview_statisticAddon__4ZK_J\",\"textGreen\":\"CurrentMonthOverview_textGreen__AjR7U\",\"textRed\":\"CurrentMonthOverview_textRed__2aAzI\"};","import { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"https://api.brokalys.com\",\n  }),\n});\n\nexport default client;\n","import React from \"react\";\n\nconst FilterContext = React.createContext();\n\nexport default FilterContext;\n","import React, { useContext } from \"react\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport { transliterate } from \"transliteration\";\n\nimport FilterContext from \"context/FilterContext\";\nimport styles from \"./FilterToolbar.module.css\";\n\nfunction FilterToolbar() {\n  const context = useContext(FilterContext);\n\n  function onLocationChange(event, data) {\n    context.location.setSelected(data.value);\n  }\n\n  function onCategoryChange(event, data) {\n    context.category.setSelected(data.value);\n  }\n\n  function onTypeChange(event, data) {\n    context.type.setSelected(data.value);\n  }\n\n  /**\n   * Improved search operation to ignore all UTF-8 characters.\n   */\n  function onSearch(all, selected) {\n    const regexp = new RegExp(transliterate(selected), \"i\");\n    return all.filter((row) => regexp.test(transliterate(row.text)));\n  }\n\n  return (\n    <div className={styles.container}>\n      <Menu secondary>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select location\"\n            search={onSearch}\n            selection\n            defaultValue={context.location.default}\n            options={context.location.options}\n            onChange={onLocationChange}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select category\"\n            fluid\n            selection\n            defaultValue={context.category.default}\n            options={context.category.options}\n            onChange={onCategoryChange}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select type\"\n            fluid\n            selection\n            defaultValue={context.type.default}\n            options={context.type.options}\n            onChange={onTypeChange}\n          />\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n}\n\nexport default FilterToolbar;\n","import FilterToolbar from \"./FilterToolbar\";\n\nexport default FilterToolbar;\n","import React from \"react\";\nimport { Button, Icon, Menu, Popup } from \"semantic-ui-react\";\n\nimport styles from \"./Navigation.module.css\";\n\nfunction Navigation() {\n  function onFeedbackClick() {\n    window.location.href = \"mailto:matiss@brokalys.com?subject=Feedback\";\n  }\n\n  return (\n    <Menu secondary>\n      <Menu.Header>\n        <img src=\"https://brokalys.com/favicon.png\" alt=\"logo\" height=\"40px\" />\n      </Menu.Header>\n\n      <Menu.Item position=\"right\">\n        <Popup\n          content=\"Sign up for instant notifications about classifieds matching your parameters\"\n          inverted\n          position=\"bottom right\"\n          trigger={\n            <a\n              href=\"https://pinger.brokalys.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={styles.notificationLink}\n            >\n              <Icon name=\"bell outline\" className={styles.shake} />\n            </a>\n          }\n        />\n      </Menu.Item>\n\n      {/*<Menu.Item fitted>\n        <Button basic animated=\"vertical\">\n          <Button.Content visible>Compare</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"crosshairs\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>*/}\n\n      <Menu.Item fitted>\n        <Button primary animated=\"vertical\" onClick={onFeedbackClick}>\n          <Button.Content visible>Give feedback</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"mail\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Navigation;\n","import Navigation from \"./Navigation\";\n\nexport default Navigation;\n","import { useMemo } from \"react\";\nimport useAxios from \"axios-hooks\";\nimport parse from \"csv-parse/lib/sync\";\n\nexport default function useBrokalysStaticApi(category, type, location) {\n  const [{ loading, error, data: csvString }] = useAxios(\n    `https://raw.githubusercontent.com/brokalys/data/master/data/${category}/${type}-monthly-riga.csv`\n  );\n\n  const data = useMemo(() => {\n    if (!csvString) {\n      return [];\n    }\n\n    const csv = parse(csvString);\n    const header = csv.shift();\n    const priceIndex = header.findIndex((row) => row === location);\n\n    return csv.map((row) => ({\n      start: row[0],\n      end: row[1],\n      price: row[priceIndex],\n    }));\n  }, [location, csvString]);\n\n  return [{ loading, error, data }];\n}\n","import React, { useContext, useMemo } from \"react\";\nimport { Dimmer, Loader, Message, Segment } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport { ResponsiveLine } from \"@nivo/line\";\n\nimport FilterContext from \"context/FilterContext\";\nimport useBrokalysStaticApi from \"hooks/use-brokalys-static-api\";\nimport styles from \"./PropertyPriceChart.module.css\";\n\nfunction PropertyPriceChart() {\n  const context = useContext(FilterContext);\n  const [{ loading, error, data: responseData }] = useBrokalysStaticApi(\n    context.category.selected,\n    context.type.selected,\n    context.location.selected\n  );\n\n  const data = useMemo(\n    () => [\n      {\n        id: \"Median Price\",\n        data: responseData.map((row) => ({\n          x: row.start,\n          y: row.price > 0 ? row.price : null,\n        })),\n      },\n    ],\n    [responseData]\n  );\n\n  if (error) {\n    return (\n      <Message\n        negative\n        content=\"An unexpected error occurred loading the chart. Please try again later.\"\n      />\n    );\n  }\n\n  return (\n    <Segment basic className={styles.container}>\n      <Dimmer inverted active={loading}>\n        <Loader />\n      </Dimmer>\n\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 10, right: 10, bottom: 100, left: 50 }}\n        xScale={{\n          type: \"time\",\n          format: \"%Y-%m-%d\",\n          precision: \"month\",\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          type: \"linear\",\n          stacked: false,\n        }}\n        sliceTooltip={({ slice }) => {\n          return (\n            <div className={styles.tooltip}>\n              {slice.points.map((point) => (\n                <div key={point.id}>\n                  <div>\n                    <strong>{moment(point.data.x).format(\"YYYY-MM-DD\")}</strong>\n                  </div>\n                  <div>\n                    <strong>{point.serieId}:</strong>{\" \"}\n                    {Number(point.data.yFormatted).toLocaleString(\"en\", {\n                      minimumFractionDigits: 2,\n                    })}{\" \"}\n                    EUR\n                  </div>\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        axisBottom={{\n          format: \"%Y-%m\",\n          tickValues: \"every 2 months\",\n          tickRotation: -90,\n        }}\n        enablePoints={true}\n        curve=\"monotoneX\"\n        useMesh={true}\n        enableSlices=\"x\"\n      />\n    </Segment>\n  );\n}\n\nexport default PropertyPriceChart;\n","import PropertyPriceChart from \"./PropertyPriceChart\";\n\nexport default PropertyPriceChart;\n","import React, { useContext } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { Header, Statistic } from \"semantic-ui-react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport moment from \"moment\";\n\nimport FilterContext from \"context/FilterContext\";\nimport useBrokalysStaticApi from \"hooks/use-brokalys-static-api\";\nimport styles from \"./CurrentMonthOverview.module.css\";\n\nconst GET_MEDIAN_PRICE = gql`\n  query(\n    $type: String!\n    $category: String!\n    $current_month_start: String!\n    $last_month_start: String!\n    $last_month_end: String!\n    $last_year_start: String!\n    $last_year_end: String!\n    $region: [String!]!\n  ) {\n    current_month: properties(\n      filter: {\n        category: { eq: $category }\n        type: { eq: $type }\n        published_at: { gte: $current_month_start }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    last_month: properties(\n      filter: {\n        category: { eq: $category }\n        type: { eq: $type }\n        published_at: { gte: $last_month_start, lt: $last_month_end }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    last_year: properties(\n      filter: {\n        category: { eq: $category }\n        type: { eq: $type }\n        published_at: { gte: $last_year_start, lt: $last_year_end }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n  }\n`;\n\nconst currentMonth = moment().utc().clone().startOf(\"month\");\n\nfunction MedianPrice({ loading, data }) {\n  if (loading) {\n    return <Skeleton height={42} />;\n  }\n\n  const median = data.price;\n  const momChange = data.priceChange.mom;\n  const yoyChange = data.priceChange.yoy;\n\n  return (\n    <div>\n      <div className={styles.statisticAddon}>\n        {isFinite(momChange) && (\n          <div>\n            <span className={momChange < 0 ? styles.textGreen : styles.textRed}>\n              {momChange < 0 ? \"+\" : \"\"}\n              {-momChange.toFixed(2)}%\n            </span>{\" \"}\n            MoM\n          </div>\n        )}\n        {isFinite(yoyChange) && (\n          <div>\n            <span className={yoyChange < 0 ? styles.textGreen : styles.textRed}>\n              {yoyChange < 0 ? \"+\" : \"\"}\n              {-yoyChange.toFixed(2)}%\n            </span>{\" \"}\n            YoY\n          </div>\n        )}\n      </div>\n\n      {parseInt(median, 10).toLocaleString(\"en\")}\n    </div>\n  );\n}\n\nfunction PropertyCount({ loading, data }) {\n  if (loading) {\n    return <Skeleton height={42} />;\n  }\n\n  const { count } = data.current_month.summary;\n  const momChange = (1 - count / data.last_month.summary.count) * 100;\n  const yoyChange = (1 - count / data.last_year.summary.count) * 100;\n\n  return (\n    <div>\n      <div className={styles.statisticAddon}>\n        {isFinite(momChange) && (\n          <div>\n            <span className={momChange < 0 ? styles.textGreen : styles.textRed}>\n              {momChange < 0 ? \"+\" : \"\"}\n              {-momChange.toFixed(2)}%\n            </span>{\" \"}\n            MoM\n          </div>\n        )}\n        {isFinite(yoyChange) && (\n          <div>\n            <span className={yoyChange < 0 ? styles.textGreen : styles.textRed}>\n              {yoyChange < 0 ? \"+\" : \"\"}\n              {-yoyChange.toFixed(2)}%\n            </span>{\" \"}\n            YoY\n          </div>\n        )}\n      </div>\n\n      {count}\n    </div>\n  );\n}\n\nfunction RentalYieldValue({ category, location }) {\n  const { loading, data: value } = useRentalYield(category, location);\n\n  if (loading) {\n    return <Skeleton height={40} />;\n  }\n\n  return <Statistic.Value>{value.toFixed(2)}%</Statistic.Value>;\n}\n\nfunction useLastPrice(category, type, location) {\n  const [{ loading, error, data }] = useBrokalysStaticApi(\n    category,\n    type,\n    location\n  );\n  const last = data[data.length - 1];\n\n  return {\n    loading,\n    error,\n    data: last ? last.price : 0,\n  };\n}\n\nfunction useRentalYield(category, location) {\n  const { loading: rentLoading, data: rentPrice } = useLastPrice(\n    category,\n    \"rent\",\n    location\n  );\n\n  const { loading: sellLoading, data: sellPrice } = useLastPrice(\n    category,\n    \"sell\",\n    location\n  );\n\n  return {\n    loading: rentLoading || sellLoading,\n    data: (rentPrice / sellPrice) * 100,\n  };\n}\n\nfunction useCurrentMonthStatistics(category, type, location) {\n  const [{ loading, data }] = useBrokalysStaticApi(category, type, location);\n\n  if (loading) {\n    return { loading };\n  }\n\n  const lastMonth = data[data.length - 1];\n  const monthBefore = data[data.length - 2];\n  const yearAgo = data[data.length - 13];\n\n  return {\n    loading,\n    data: {\n      price: lastMonth.price,\n      priceChange: {\n        mom: (1 - lastMonth.price / monthBefore.price) * 100,\n        yoy: (1 - lastMonth.price / yearAgo.price) * 100,\n      },\n    },\n  };\n}\n\nfunction CurrentMonthOverview() {\n  const context = useContext(FilterContext);\n\n  const { loading: loadingPrice, data: dataPrice } = useCurrentMonthStatistics(\n    context.category.selected,\n    context.type.selected,\n    context.location.selected\n  );\n\n  const { loading, data } = useQuery(GET_MEDIAN_PRICE, {\n    variables: {\n      type: context.type.selected,\n      category: context.category.selected,\n      current_month_start: currentMonth.toISOString(),\n      last_month_start: currentMonth.clone().subtract(1, \"month\").toISOString(),\n      last_month_end: currentMonth\n        .clone()\n        .subtract(1, \"month\")\n        .add(1, \"month\")\n        .toISOString(),\n      last_year_start: currentMonth.clone().subtract(1, \"year\").toISOString(),\n      last_year_end: currentMonth\n        .clone()\n        .subtract(1, \"year\")\n        .add(1, \"month\")\n        .toISOString(),\n      region: [context.location.selectedRegion],\n    },\n  });\n\n  return (\n    <div>\n      <Header as=\"h3\">Last Month</Header>\n\n      <Statistic.Group size=\"small\">\n        <Statistic>\n          <Statistic.Value>\n            <MedianPrice loading={loadingPrice} data={dataPrice} />\n          </Statistic.Value>\n          <Statistic.Label>\n            Median Price (EUR/m<sup>2</sup>)\n          </Statistic.Label>\n        </Statistic>\n\n        <Statistic>\n          <Statistic.Value>\n            <PropertyCount loading={loading} data={data} />\n          </Statistic.Value>\n          <Statistic.Label>Classified amount</Statistic.Label>\n        </Statistic>\n\n        <Statistic>\n          <RentalYieldValue\n            location={context.location.selected}\n            category={context.category.selected}\n          />\n          <Statistic.Label>Rental Yield</Statistic.Label>\n        </Statistic>\n      </Statistic.Group>\n    </div>\n  );\n}\n\nexport default CurrentMonthOverview;\n","import CurrentMonthOverview from \"./CurrentMonthOverview\";\n\nexport default CurrentMonthOverview;\n","import React, { useState } from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\nimport FilterToolbar from \"components/FilterToolbar\";\nimport Navigation from \"components/Navigation\";\nimport PropertyPriceChart from \"components/PropertyPriceChart\";\nimport CurrentMonthOverview from \"containers/CurrentMonthOverview\";\nimport FilterContext from \"context/FilterContext\";\nimport rigaGeojson from \"data/riga-geojson.json\";\n\nimport styles from \"./SplitPaneLeft.module.css\";\n\nconst locationOptions = rigaGeojson.features.map((row) => ({\n  value: row.properties.apkaime,\n  text: row.properties.apkaime,\n}));\n\nconst categoryOptions = [\n  { value: \"apartment\", text: \"Apartment\" },\n  { value: \"house\", text: \"House\" },\n  { value: \"land\", text: \"Land\" },\n];\nconst typeOptions = [\n  { value: \"sell\", text: \"Sell\" },\n  { value: \"rent\", text: \"Rent\" },\n];\n\nfunction coordinatesToRegion(coordinates) {\n  const parts = coordinates.map((row) => `${row[1]} ${row[0]}`);\n  parts.push(parts[0]);\n  return parts.join(\", \");\n}\n\nfunction SplitPaneLeft() {\n  const [filterState, setFilterState] = useState({\n    location: {\n      options: locationOptions,\n      default: \"Centrs\",\n      selected: \"Centrs\",\n      selectedRegion: coordinatesToRegion(\n        rigaGeojson.features.find(\n          ({ properties }) => properties.apkaime === \"Centrs\"\n        ).geometry.coordinates[0]\n      ),\n      setSelected(selected) {\n        setFilterState((state) => ({\n          ...state,\n          location: {\n            ...state.location,\n            selected,\n            selectedRegion: coordinatesToRegion(\n              rigaGeojson.features.find(\n                ({ properties }) => properties.apkaime === selected\n              ).geometry.coordinates[0]\n            ),\n          },\n        }));\n      },\n    },\n    category: {\n      options: categoryOptions,\n      default: \"apartment\",\n      selected: \"apartment\",\n      setSelected(selected) {\n        setFilterState((state) => ({\n          ...state,\n          category: {\n            ...state.category,\n            selected,\n          },\n        }));\n      },\n    },\n    type: {\n      options: typeOptions,\n      default: \"sell\",\n      selected: \"sell\",\n      setSelected(selected) {\n        setFilterState((state) => ({\n          ...state,\n          type: {\n            ...state.type,\n            selected,\n          },\n        }));\n      },\n    },\n  });\n\n  return (\n    <div className={styles.container}>\n      <Navigation />\n\n      <FilterContext.Provider value={filterState} className={styles.content}>\n        <Header as=\"h2\">\n          Average Prices in{\" \"}\n          <span className={styles.highlightedText}>\n            {filterState.location.selected}\n          </span>\n        </Header>\n\n        <FilterToolbar />\n        <PropertyPriceChart />\n        <CurrentMonthOverview />\n      </FilterContext.Provider>\n    </div>\n  );\n}\n\nexport default SplitPaneLeft;\n","import SplitPaneLeft from \"./SplitPaneLeft\";\n\nexport default SplitPaneLeft;\n","import React from \"react\";\n\nconst MapContext = React.createContext();\n\nexport default MapContext;\n","import React, { useContext } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\n\nimport MapContext from \"context/MapContext\";\n\nfunction Map(props) {\n  const context = useContext(MapContext);\n\n  /**\n   * Ignore the overlay when doing data lookups by region.\n   */\n  function onChange(map) {\n    const { bounds } = map;\n\n    const mapHeight = map.size.height;\n    const overlayHeight = document.getElementById(\"map-overlay\").offsetTop;\n    const percentage = 1 - overlayHeight / mapHeight;\n\n    const newBounds = {\n      nw: bounds.nw,\n      ne: bounds.ne,\n\n      sw: {\n        lat: bounds.sw.lat + (bounds.nw.lat - bounds.sw.lat) * percentage,\n        lng: bounds.sw.lng,\n      },\n      se: {\n        lat: bounds.se.lat + (bounds.nw.lat - bounds.se.lat) * percentage,\n        lng: bounds.se.lng,\n      },\n    };\n\n    context.setBounds(newBounds);\n  }\n\n  return (\n    <GoogleMapReact\n      bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_KEY }}\n      defaultCenter={{\n        lat: 56.879635,\n        lng: 24.603189,\n      }}\n      defaultZoom={7}\n      options={{\n        disableDefaultUI: true,\n      }}\n      onChange={onChange}\n    />\n  );\n}\n\nexport default Map;\n","import Map from \"./Map\";\n\nexport default Map;\n","import { useEffect, useState } from \"react\";\nimport { useDebounce, useDebouncedCallback } from \"use-debounce\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nexport default function useDebouncedQuery(query, nextConfig, time = 1000) {\n  const nextConfigStr = JSON.stringify(nextConfig);\n  const [debouncedIsLoading, setDebouncedLoading] = useState(true);\n  const [previousData, setPreviousData] = useState(undefined);\n  const [config] = useDebounce(nextConfig, time, {\n    equalityFn: (prev, next) => JSON.stringify(prev) === JSON.stringify(next),\n  });\n\n  const [performLazyQuery, { loading, data }] = useLazyQuery(query, config);\n  const [performDebouncedQuery] = useDebouncedCallback(() => {\n    performLazyQuery();\n  }, time);\n\n  useEffect(() => {\n    setDebouncedLoading(true);\n    performDebouncedQuery();\n  }, [nextConfigStr, performDebouncedQuery]);\n\n  useEffect(() => {\n    if (loading === false && data) {\n      setDebouncedLoading(false);\n      setPreviousData(data);\n    }\n  }, [loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    loading: loading || debouncedIsLoading,\n    data: data || previousData,\n  };\n}\n","import React from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\nimport styles from \"./AreaOverview.module.css\";\n\nfunction AreaOverview({ children, year }) {\n  return (\n    <div>\n      <Header as=\"h4\">Selected Area</Header>\n      <div>\n        <div className={styles.currency}>€</div>\n        <div className={styles.amount}>{children}</div>\n        <div className={styles.label}>Median Price last 30 days</div>\n      </div>\n    </div>\n  );\n}\n\nexport default AreaOverview;\n","import React, { useContext, useMemo } from \"react\";\nimport { Dimmer, Loader, Segment } from \"semantic-ui-react\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { gql } from \"@apollo/client\";\nimport { ResponsiveLine } from \"@nivo/line\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport styles from \"./PropertyPriceLine.module.css\";\n\nconst moment = extendMoment(Moment);\nconst range = moment().range(\n  moment().utc().startOf(\"day\").subtract(30, \"days\"),\n  new Date()\n);\nconst dates = Array.from(range.by(\"day\", { excludeEnd: true }));\n\nconst GET_MEDIAN_PRICE = (dates) => gql`\n  query(\n    $type: String!\n    $region: [String!]!\n  ) {\n    ${dates.map(\n      (date, id) => `\n      row_${id}: properties(\n        filter: {\n          type: { eq: $type }\n          published_at: {\n            gte: \"${date.toISOString()}\"\n            lte: \"${date.clone().endOf(\"day\").toISOString()}\"\n          }\n          region: { in: $region }\n        }\n      ) {\n        summary {\n          price {\n            median\n          }\n        }\n      }\n    `\n    )}\n  }\n`;\n\nfunction transformResponse(data) {\n  if (!data) {\n    return [];\n  }\n\n  return dates.map((date, index) => {\n    if (!data) {\n      return {};\n    }\n\n    return {\n      x: date.format(\"YYYY-MM-DD\"),\n      y: data[`row_${index}`].summary.price.median,\n    };\n  });\n}\n\nfunction PropertyPriceLine({ type }) {\n  const map = useContext(MapContext);\n  const { loading, data: custom } = useDebouncedQuery(\n    GET_MEDIAN_PRICE(dates),\n    {\n      variables: {\n        type,\n        region: [map.region],\n      },\n    },\n    2000\n  );\n\n  const data = useMemo(\n    () => [\n      {\n        id: \"Median price\",\n        data: transformResponse(custom),\n      },\n    ],\n    [custom]\n  );\n\n  return (\n    <Segment basic className={styles.container}>\n      <Dimmer inverted active={loading}>\n        <Loader />\n      </Dimmer>\n\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 5, right: 5, bottom: 5, left: 5 }}\n        xScale={{\n          type: \"time\",\n          format: \"%Y-%m-%d\",\n          precision: \"day\",\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          type: \"linear\",\n          stacked: false,\n        }}\n        sliceTooltip={({ slice }) => {\n          return (\n            <div className={styles.tooltip}>\n              {slice.points.map((point) => (\n                <div key={point.id}>\n                  <div>\n                    <strong>{moment(point.data.x).format(\"YYYY-MM-DD\")}</strong>\n                  </div>\n                  <div>\n                    <strong>{point.serieId}:</strong>{\" \"}\n                    {Number(point.data.yFormatted).toLocaleString(\"en\", {\n                      minimumFractionDigits: 2,\n                    })}{\" \"}\n                    EUR\n                  </div>\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        colors={[\"#543193\"]}\n        axisLeft={{ enable: false, tickSize: 0 }}\n        axisBottom={false}\n        enableGridX={false}\n        enableGridY={false}\n        enablePoints={false}\n        curve=\"natural\"\n        useMesh={false}\n        enableSlices=\"x\"\n      />\n    </Segment>\n  );\n}\n\nexport default PropertyPriceLine;\n","import React, { useContext, useState } from \"react\";\nimport { gql } from \"@apollo/client\";\nimport { Dimmer, Header, Loader, Segment } from \"semantic-ui-react\";\nimport { ResponsiveBar } from \"@nivo/bar\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport styles from \"./PropertyTypeChart.module.css\";\n\nconst defaultColor = \"#543193\";\nconst selectedColor = \"#c0ace3\";\nconst defaultColors = [defaultColor, defaultColor, defaultColor];\n\nconst GET_MEDIAN_PRICE = gql`\n  query($type: String!, $date: String!, $region: [String!]!) {\n    median_price: properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price {\n          median\n        }\n      }\n    }\n\n    apartment_count: properties(\n      filter: {\n        category: { eq: \"APARTMENT\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    house_count: properties(\n      filter: {\n        category: { eq: \"HOUSE\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    land_count: properties(\n      filter: {\n        category: { eq: \"LAND\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n  }\n`;\n\nfunction normalizeChartData(data) {\n  return [\n    {\n      category: \"Land\",\n      value: data ? data.land_count.summary.count : 0,\n    },\n    {\n      category: \"House\",\n      value: data ? data.house_count.summary.count : 0,\n    },\n    {\n      category: \"Apartment\",\n      value: data ? data.apartment_count.summary.count : 0,\n    },\n  ];\n}\n\nfunction PropertyTypeChart({ type, startDate }) {\n  const map = useContext(MapContext);\n  const { loading, data } = useDebouncedQuery(\n    GET_MEDIAN_PRICE,\n    {\n      variables: {\n        type,\n        date: startDate,\n        region: [map.region],\n      },\n    },\n    1000\n  );\n  const [colors, setColors] = useState(defaultColors);\n\n  function onClick({ index }) {\n    setColors((state) => {\n      if (state[index] === selectedColor) {\n        return defaultColors;\n      }\n\n      const newColors = [...defaultColors];\n      newColors[index] = selectedColor;\n      return newColors;\n    });\n  }\n\n  return (\n    <div>\n      <Header as=\"h4\" className={styles.title}>\n        Property type distribution\n      </Header>\n      <Segment basic className={styles.container}>\n        <Dimmer inverted active={loading}>\n          <Loader />\n        </Dimmer>\n\n        <ResponsiveBar\n          data={normalizeChartData(data)}\n          layout=\"horizontal\"\n          enableGridY={false}\n          enableLabel={false}\n          axisLeft={{ tickSize: 0 }}\n          axisBottom={false}\n          keys={[\"value\"]}\n          indexBy=\"category\"\n          margin={{ top: 0, right: 0, bottom: 0, left: 60 }}\n          animate={true}\n          colors={colors}\n          padding={0.4}\n          onClick={onClick}\n        />\n      </Segment>\n    </div>\n  );\n}\n\nexport default PropertyTypeChart;\n","import React, { useContext, useState } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { gql } from \"@apollo/client\";\nimport { Grid, Header } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport AreaOverview from \"./components/AreaOverview\";\nimport PropertyPriceLine from \"./components/PropertyPriceLine\";\nimport PropertyTypeChart from \"./components/PropertyTypeChart\";\n\nimport styles from \"./MapOverlay.module.css\";\n\nconst GET_MEDIAN_PRICE = gql`\n  query($type: String!, $date: String!, $region: [String!]!) {\n    properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price {\n          median\n        }\n      }\n    }\n  }\n`;\n\nfunction PriceLabel({ price }) {\n  if (!price) {\n    return \"Unknown\";\n  }\n\n  return parseInt(price, 10).toLocaleString(\"en\");\n}\n\nfunction MapOverlay() {\n  const map = useContext(MapContext);\n  const [startDate] = useState(\n    moment().subtract(30, \"days\").format(\"YYYY-MM-DD\")\n  );\n  const [type] = useState(\"sell\"); // @todo: dynamic\n  const { loading, error, data } = useDebouncedQuery(\n    GET_MEDIAN_PRICE,\n    {\n      variables: {\n        type: type,\n        date: startDate,\n        region: [map.region],\n      },\n    },\n    1000\n  );\n\n  const isLoading = loading || !data;\n\n  if (error) {\n    return (\n      <div className={styles.container}>\n        <Header as=\"h4\">\n          An unexpected error occured when attempting to fetch the data. Try\n          again later.\n        </Header>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container} id=\"map-overlay\">\n      <Grid>\n        <Grid.Column computer={8}>\n          <AreaOverview>\n            {isLoading ? (\n              <Skeleton />\n            ) : (\n              <PriceLabel price={data.properties.summary.price.median} />\n            )}\n          </AreaOverview>\n\n          <PropertyPriceLine type={type} />\n        </Grid.Column>\n        <Grid.Column computer={8}>\n          <PropertyTypeChart type={type} startDate={startDate} />\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n}\n\nexport default MapOverlay;\n","import MapOverlay from \"./MapOverlay\";\n\nexport default MapOverlay;\n","import React, { useState } from \"react\";\n\nimport Map from \"components/Map\";\nimport MapOverlay from \"components/MapOverlay\";\nimport MapContext from \"context/MapContext\";\n\nimport styles from \"./SplitPaneRight.module.css\";\n\nfunction convertBoundsToRegionString(bounds) {\n  const parts = [\n    [bounds.ne.lat, bounds.ne.lng].join(\" \"),\n    [bounds.nw.lat, bounds.nw.lng].join(\" \"),\n    [bounds.se.lat, bounds.se.lng].join(\" \"),\n    [bounds.sw.lat, bounds.sw.lng].join(\" \"),\n    [bounds.ne.lat, bounds.ne.lng].join(\" \"),\n  ];\n  return parts.join(\", \");\n}\n\nfunction SplitPaneRight() {\n  const [mapState, setMapState] = useState({\n    setBounds,\n    bounds: {\n      ne: {},\n      nw: {},\n      se: {},\n      sw: {},\n    },\n    region: \"\",\n  });\n\n  function setBounds(bounds) {\n    setMapState((state) => ({\n      ...state,\n      bounds,\n      region: convertBoundsToRegionString(bounds),\n    }));\n  }\n\n  return (\n    <div className={styles.container}>\n      <MapContext.Provider value={mapState}>\n        <Map />\n        <MapOverlay />\n      </MapContext.Provider>\n    </div>\n  );\n}\n\nexport default SplitPaneRight;\n","import SplitPaneRight from \"./SplitPaneRight\";\n\nexport default SplitPaneRight;\n","import React from \"react\";\nimport { Container, Grid } from \"semantic-ui-react\";\n\nimport SplitPaneLeft from \"containers/SplitPaneLeft\";\nimport SplitPaneRight from \"containers/SplitPaneRight\";\n\nimport styles from \"./App.module.css\";\n\nfunction App(props) {\n  return (\n    <Container fluid className={styles.container}>\n      <Grid className={styles.grid}>\n        <Grid.Column computer={9} className={styles.leftPanel}>\n          <SplitPaneLeft />\n        </Grid.Column>\n        <Grid.Column computer={7} className={styles.rightPanel}>\n          <SplitPaneRight />\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport client from \"./apollo-client\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}