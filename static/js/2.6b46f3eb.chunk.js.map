{"version":3,"sources":["components/Notification.js","components/Toolbar.js","pages/Home.js"],"names":["Notification","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","closeNotification","bind","assertThisInitialized","state","showNotification","setState","localStorage","setItem","getItem","_this2","setTimeout","react_default","a","createElement","className","reactstrap_es","onClick","aria-hidden","href","target","rel","React","Component","Toolbar","toggleMonthSlider","onSliderChange","showMonthSlider","region","data","category","onUpdate","value","type","change","activeTimeframe","selectedCategory","maxTimeframe","keys","timeframes","length","components_Notification","es","vertical","dots","min","max","marks","step","onChange","included","color","nav","right","header","active","onSelectRegion","onSelectCategory","onSelectType","NavLink","to","coords","styles","featureType","elementType","stylers","invert_lightness","saturation","lightness","gamma","hue","params","v","key","process","Home","onMapCreated","onToolbarUpdate","loadedRegions","priceData","pricePerSqmData","progress","configure","showSpinner","speed","trickleSpeed","start","map","loadRegion","infoWindow","window","google","maps","InfoWindow","onMapChanged","indexOf","push","loadGeoJson","concat","isStarted","setOptions","disableDefaultUI","zoomControl","zoomControlOptions","position","ControlPosition","TOP_LEFT","loadPriceData","loadPricePerSqmData","values","row","getMonthName","assign","console","error","_context","t0","alert","changeActiveTimeframe","addListener","event","regionName","feature","getProperty","findRegionByName","price","toFixed","replace","pricePerSqm","timeframe","setContent","name","setPosition","latLng","open","done","_this3","close","_this$priceData","body","uniquePrices","toConsumableArray","Set","colors","colormap","nshades","format","reverse","regions","index","parseInt","sort","b","all","prev","colorIndex","setStyle","visible","strokeColor","strokeWeight","fillColor","fillOpacity","zIndex","_this4","undefined","dist","width","height","lat","lng","zoom","components_Toolbar","fetch","response","text","csvData","parse","slice","find","month","year","Math","floor","join"],"mappings":"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","file":"static/js/2.6b46f3eb.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'reactstrap';\nimport './notification.css';\n\nclass Notification extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.closeNotification = this.closeNotification.bind(this);\n\n    this.state = {\n      showNotification: false,\n    };\n  }\n\n  closeNotification() {\n    this.setState({\n      showNotification: false,\n    });\n    localStorage.setItem('notification', 'closed');\n  }\n\n  showNotification() {\n    return localStorage.getItem('notification') !== 'closed';\n  }\n\n  componentDidMount() {\n    if (this.showNotification() === false) {\n      return;\n    }\n\n    setTimeout(() => {\n      this.setState({\n        showNotification: true,\n      });\n    }, 15000);\n  }\n\n  render() {\n    if (this.showNotification() === false) {\n      return '';\n    }\n\n    return (\n      <div className={(this.state.showNotification ? 'active' : '' ) + ' alert position-absolute notification'}>\n        <Button className=\"close\" onClick={this.closeNotification}>\n          <span aria-hidden=\"true\">&times;</span>\n        </Button>\n\n        Vēlies saņemt paziņojumu e-pastā par jauniem datiem? <a href=\"http://eepurl.com/dpYH4r\" target=\"_blank\" rel=\"noopener noreferrer\">Klikšķini te</a>\n      </div>\n    );\n  }\n\n}\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from 'rc-slider';\nimport { NavLink } from 'react-router-dom';\nimport {\n  Button,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Nav,\n  NavItem,\n  Navbar,\n  UncontrolledDropdown,\n} from 'reactstrap';\nimport Notification from './Notification';\n\nclass Toolbar extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.toggleMonthSlider = this.toggleMonthSlider.bind(this);\n    this.onSliderChange = this.onSliderChange.bind(this);\n\n    this.state = {\n      showMonthSlider: false,\n    };\n  }\n\n  toggleMonthSlider() {\n    this.setState({\n      showMonthSlider: !this.state.showMonthSlider,\n    });\n  }\n\n  onSelectRegion(region) {\n    const data = { region };\n\n    if (region === 'latvia' && this.props.category === 'land') {\n      data.category = 'apartment';\n    }\n\n    this.props.onUpdate(data);\n  }\n\n  onSelectCategory(value) {\n    this.props.onUpdate({\n      category: value,\n    });\n  }\n\n  onSelectType(value) {\n    this.props.onUpdate({\n      type: value,\n    });\n  }\n\n  onSliderChange(change) {\n    this.props.onUpdate({\n      activeTimeframe: change,\n    });\n  }\n\n  render() {\n    const maxTimeframe = Object.keys(this.props.timeframes).length - 1;\n    let selectedCategory;\n\n    switch (this.props.category) {\n      case 'apartment':\n        selectedCategory = 'Dzīvoklis';\n        break;\n      case 'house':\n        selectedCategory = 'Māja';\n        break;\n      case 'land':\n        selectedCategory = 'Zeme';\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <footer>\n        <Notification></Notification>\n\n        { this.state.showMonthSlider &&\n          <div className=\"slider\">\n            <Slider vertical dots min={0} max={maxTimeframe} marks={this.props.timeframes} step={1} onChange={this.onSliderChange} value={this.props.activeTimeframe} included={false} />\n          </div>\n        }\n\n        <Navbar className=\"navbar-dark bg-dark fixed-bottom\">\n          <Nav>\n\n            <Button color=\"link\" className={this.state.showMonthSlider ? 'active' : ''} onClick={this.toggleMonthSlider}>\n              <i className=\"far fa-calendar-alt\"></i>\n              <span className=\"ml-2 d-none d-sm-inline-block\">\n                { this.props.timeframes[this.props.activeTimeframe] }\n              </span>\n            </Button>\n\n            <UncontrolledDropdown>\n              <DropdownToggle nav>\n                <i className=\"far fa-map\"></i>\n                <span className=\"ml-2 d-none d-sm-inline-block\">\n                  { this.props.region === 'latvia' ? 'Latvija' : 'Rīga' }\n                </span>\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem header>Reģions</DropdownItem>\n                <DropdownItem active={this.props.region === 'riga'} onClick={this.onSelectRegion.bind(this, 'riga')}>\n                  Rīga\n                </DropdownItem>\n                <DropdownItem active={this.props.region === 'latvia'} onClick={this.onSelectRegion.bind(this, 'latvia')}>\n                  Latvija\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n\n            <UncontrolledDropdown>\n              <DropdownToggle nav>\n                <i className=\"far fa-building\"></i>\n                <span className=\"ml-2 d-none d-sm-inline-block\">\n                  { selectedCategory }\n                </span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem header>Īpašuma veids</DropdownItem>\n                <DropdownItem active={this.props.category === 'apartment'} onClick={this.onSelectCategory.bind(this, 'apartment')}>Dzīvoklis</DropdownItem>\n                <DropdownItem active={this.props.category === 'house'} onClick={this.onSelectCategory.bind(this, 'house')}>Māja</DropdownItem>\n                { this.props.region !== 'latvia' &&\n                  <DropdownItem active={this.props.category === 'land'} onClick={this.onSelectCategory.bind(this, 'land')}>Zeme</DropdownItem>\n                }\n              </DropdownMenu>\n            </UncontrolledDropdown>\n\n            <UncontrolledDropdown>\n              <DropdownToggle nav>\n                <i className=\"far fa-handshake\"></i>\n                <span className=\"ml-2 d-none d-sm-inline-block\">\n                  { this.props.type === 'rent' ? 'Īrē' : 'Pārdod' }\n                </span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem header>Darījumu tips</DropdownItem>\n                <DropdownItem active={this.props.type === 'sell'} onClick={this.onSelectType.bind(this, 'sell')}>Pārdod</DropdownItem>\n                <DropdownItem active={this.props.type === 'rent'} onClick={this.onSelectType.bind(this, 'rent')}>Īrē</DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n\n            <NavItem>\n              <NavLink to=\"/pulse\" className=\"nav-link text-danger\">Atvērt tirgus pulsu</NavLink>\n            </NavItem>\n          </Nav>\n        </Navbar>\n      </footer>\n    );\n  }\n\n}\n\nToolbar.propTypes = {\n  region: PropTypes.string,\n  category: PropTypes.string,\n  type: PropTypes.string,\n  activeTimeframe: PropTypes.number,\n  onUpdate: PropTypes.func,\n};\n\nexport default Toolbar;\n","import React from 'react';\nimport { Gmaps } from 'react-gmaps';\nimport parse from 'csv-parse/lib/es5/sync';\nimport colormap from 'colormap';\nimport progress from 'nprogress';\n\nimport Toolbar from '../components/Toolbar';\n\nconst coords = {\n  lat: 56.98,\n  lng: 24.105078,\n};\n\nconst styles = [\n  {\n    featureType: 'all',\n    elementType: 'all',\n    stylers: [{\n      invert_lightness: true,\n    }, {\n      saturation: 10,\n    }, {\n      lightness: 30,\n    }, {\n       gamma: 0.5,\n    }, {\n      hue: '#435158',\n    }],\n  },\n];\n\nconst params = {\n  v: '3.exp',\n  key: process.env.REACT_APP_GMAPS_KEY || undefined,\n};\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onMapCreated = this.onMapCreated.bind(this);\n    this.onToolbarUpdate = this.onToolbarUpdate.bind(this);\n\n    this.state = {\n      region: 'riga',\n      category: 'apartment',\n      type: 'sell',\n      timeframes: {},\n      activeTimeframe: null,\n    };\n\n    this.loadedRegions = [];\n    this.priceData = [];\n    this.pricePerSqmData = [];\n\n    progress.configure({\n      showSpinner: false,\n      speed: 1000,\n      trickleSpeed: 150,\n    });\n    progress.start();\n  }\n\n  onMapCreated(map) {\n    this.loadRegion(map);\n\n    this.map = map;\n    this.infoWindow = new window.google.maps.InfoWindow();\n\n    this.onMapChanged();\n  }\n\n  loadRegion(map) {\n    const region = this.state.region;\n\n    if (this.loadedRegions.indexOf(region) >= 0) {\n      return;\n    }\n\n    this.loadedRegions.push(region);\n    map.data.loadGeoJson(`https://raw.githubusercontent.com/brokalys/sls-data-extraction/master/data/${region}-geojson.json`);\n  }\n\n  async onMapChanged() {\n    if (progress.isStarted() === false) {\n      progress.start();\n    }\n\n    const map = this.map;\n\n    map.setOptions({\n      disableDefaultUI: true,\n      zoomControl: true,\n      zoomControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_LEFT,\n      },\n    });\n\n    try {\n      this.priceData = await this.loadPriceData();\n      this.pricePerSqmData = await this.loadPricePerSqmData();\n\n      const values = this.priceData.timeframes.map((row, key) => this.getMonthName(key));\n      this.setState({\n        timeframes: Object.assign({}, values),\n      });\n\n      // Only on initial load\n      if (this.state.activeTimeframe === null) {\n        this.setState({\n          activeTimeframe: values.length - 1,\n        });\n      }\n    } catch (e) {\n      console.error(e);\n      alert('Something really bad happened. Please try again later.');\n      return;\n    }\n\n    this.changeActiveTimeframe();\n\n    map.data.addListener('click', (event) => {\n      const regionName = event.feature.getProperty('apkaime');\n      const region = this.findRegionByName(regionName);\n\n      if (!region || region.price <= 0) {\n        return;\n      }\n\n      const price = region.price.toFixed().replace(/(\\d)(?=(\\d{3})+(,|$))/g, '$1\\'');\n      const pricePerSqm = region.pricePerSqm.toFixed().replace(/(\\d)(?=(\\d{3})+(,|$))/g, '$1\\'');\n      const timeframe = this.getMonthName(this.state.activeTimeframe);\n\n      this.infoWindow.setContent(`Mediānā cena:<br><strong>${price} EUR</strong><br>Mediānā cena par m2:<br><strong>${pricePerSqm} EUR</strong> (${region.name})<hr>${timeframe}`);\n      this.infoWindow.setPosition(event.latLng);\n      this.infoWindow.open(map);\n    });\n\n    progress.done();\n  }\n\n  changeActiveTimeframe() {\n    this.infoWindow.close();\n\n    const { header, body } = this.priceData;\n\n    const priceData = body[this.state.activeTimeframe];\n    const pricePerSqmData = this.pricePerSqmData.body[this.state.activeTimeframe];\n    const uniquePrices = [...new Set(priceData)].length;\n\n    const colors = colormap({\n      colormap: 'autumn',\n      nshades: uniquePrices,\n      format: 'hex',\n    }).reverse();\n\n    this.regions = header.map((name, index) => ({\n      name,\n      price: parseInt(priceData[index], 10),\n      pricePerSqm: parseInt(pricePerSqmData[index], 10),\n    }))\n      .sort((a, b) => a.price - b.price)\n      .map((region, index,  all) => {\n        const prev = all[index - 1] || {};\n        const colorIndex = prev.price === region.price ? prev.colorIndex || 0 : prev.colorIndex + 1;\n\n        region.colorIndex = colorIndex;\n        region.color = colors[colorIndex];\n\n        return region;\n      });\n\n    this.map.data.setStyle((feature) => {\n      const regionName = feature.getProperty('apkaime');\n      const region = this.findRegionByName(regionName);\n\n      // eslint-disable-next-line\n      if (!region || region.price <= 0 || feature.getProperty('Level') < 2 && regionName !== 'Rīga') {\n        return {\n          visible: false,\n        };\n      }\n\n      return {\n        strokeColor: region.color,\n        strokeWeight: 0.1,\n        fillColor: region.color,\n        fillOpacity: 0.5,\n        zIndex: feature.getProperty('Level') || 1,\n      };\n    });\n  }\n\n  onToolbarUpdate(change) {\n    this.setState(change, () => {\n      if (change.region) {\n        this.loadRegion(this.map);\n      }\n\n      if (change.activeTimeframe !== undefined) {\n        this.changeActiveTimeframe();\n      }\n\n      if (change.category || change.type || change.region) {\n        this.onMapChanged();\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Gmaps\n          width={'100%'}\n          height={'100%'}\n          lat={coords.lat}\n          lng={coords.lng}\n          zoom={11}\n          params={params}\n          styles={styles}\n          onMapCreated={this.onMapCreated}\n        />\n\n        <Toolbar\n          region={this.state.region}\n          category={this.state.category}\n          type={this.state.type}\n          timeframes={this.state.timeframes}\n          activeTimeframe={this.state.activeTimeframe}\n          onUpdate={this.onToolbarUpdate}\n        />\n      </div>\n    );\n  }\n\n  async loadPriceData() {\n    const response = await fetch(`https://raw.githubusercontent.com/brokalys/data/master/data/${this.state.category}/${this.state.type}-monthly-${this.state.region}.csv`);\n    const csvData = await response.text();\n    const data = parse(csvData);\n\n    return {\n      header: data[0].slice(3),\n      body: data.slice(1).map((row) => row.slice(3)),\n      timeframes: data.slice(1).map((row) => row.slice(0, 2)),\n    };\n  }\n\n  async loadPricePerSqmData() {\n    const response = await fetch(`https://raw.githubusercontent.com/brokalys/data/master/data/${this.state.category}/${this.state.type}-price-per-sqm-monthly-${this.state.region}.csv`);\n    const csvData = await response.text();\n    const data = parse(csvData);\n\n    return {\n      header: data[0].slice(3),\n      body: data.slice(1).map((row) => row.slice(3)),\n      timeframes: data.slice(1).map((row) => row.slice(0, 2)),\n    };\n  }\n\n  findRegionByName(name) {\n    return this.regions.find((region) => region.name === name);\n  }\n\n  getMonthName(index) {\n    let month;\n    const year = 2018 + Math.floor(index / 12);\n\n    switch (index % 12) {\n      case 0:\n        month = 'Janvāris';\n        break;\n      case 1:\n        month = 'Februāris';\n        break;\n      case 2:\n        month = 'Marts';\n        break;\n      case 3:\n        month = 'Aprīlis';\n        break;\n      case 4:\n        month = 'Maijs';\n        break;\n      case 5:\n        month = 'Jūnijs';\n        break;\n      case 6:\n        month = 'Jūlijs';\n        break;\n      case 7:\n        month = 'Augusts';\n        break;\n      case 8:\n        month = 'Septembris';\n        break;\n      case 9:\n        month = 'Oktobris';\n        break;\n      case 10:\n        month = 'Novembris';\n        break;\n      case 11:\n        month = 'Decembris';\n        break;\n      default:\n        break;\n    }\n\n    return [month, year].join(', ');\n  }\n\n}\n\nexport default Home;\n"],"sourceRoot":""}