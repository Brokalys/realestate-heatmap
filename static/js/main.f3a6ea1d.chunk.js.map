{"version":3,"sources":["components/Statistics/MeanPriceInFilterLocation/MeanPriceInFilterLocation.module.css","App.module.css","containers/SplitPaneLeft/SplitPaneLeft.module.css","components/MapOverlay/components/AreaOverview.module.css","components/Navigation/Navigation.module.css","components/PropertyPriceChart/PropertyPriceChart.module.css","components/MapOverlay/components/PropertyPriceLine.module.css","components/MapOverlay/components/PropertyTypeChart.module.css","components/MapOverlay/MapOverlay.module.css","components/FilterToolbar/FilterToolbar.module.css","containers/SplitPaneRight/SplitPaneRight.module.css","apollo-client.js","bugsnag.js","store/state.js","store/selectors.js","components/FilterToolbar/FilterToolbar.jsx","components/FilterToolbar/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/PropertyPriceChart/PropertyPriceChart.jsx","components/PropertyPriceChart/index.js","components/Statistics/MeanPriceInFilterLocation/MeanPriceInFilterLocation.jsx","components/Statistics/MeanPriceInFilterLocation/index.js","components/Statistics/RentalYieldInFilterLocation/RentalYieldInFilterLocation.jsx","components/Statistics/RentalYieldInFilterLocation/index.js","containers/SplitPaneLeft/SplitPaneLeft.jsx","containers/SplitPaneLeft/index.js","context/MapContext.js","components/Map/Map.jsx","components/Map/index.js","hooks/use-debounced-query.js","hooks/use-region-params.js","components/MapOverlay/components/AreaOverview.jsx","components/MapOverlay/components/PropertyPriceLine.jsx","components/MapOverlay/components/PropertyTypeChart.jsx","components/MapOverlay/MapOverlay.jsx","components/MapOverlay/index.js","containers/SplitPaneRight/SplitPaneRight.jsx","containers/SplitPaneRight/index.js","App.jsx","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["module","exports","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","Bugsnag","start","releaseStage","process","enabledReleaseStages","apiKey","plugins","BugsnagPluginReact","collectUserIp","filterState","atom","key","default","category","type","location","priceType","getCategoryFilter","selector","get","getTypeFilter","getLocationFilter","getPriceTypeFilter","getPrices","selectorFamily","filters","loadData","a","axios","filterStr","data","encodeURIComponent","JSON","stringify","runs","Promise","resolve","loadingResults","setTimeout","reloadPromise","getPricesInFilteredLocation","location_classificator","getMeanPriceLastMonth","results","group","mean","length","price","change","mom","yoy","getRentalYield","all","sellData","rentData","locationOptions","riga","features","map","row","value","properties","id","text","name","categoryOptions","typeOptions","priceTypeOptions","FilterToolbar","useRecoilState","setFilters","className","styles","container","Menu","secondary","Item","fitted","Dropdown","placeholder","search","selected","regexp","RegExp","transliterate","filter","test","selection","defaultValue","options","onChange","event","currentFilters","fluid","Navigation","Header","src","alt","height","position","Popup","content","inverted","trigger","href","target","rel","notificationLink","data-testid","Icon","shake","Button","primary","animated","onClick","window","Content","visible","hidden","PropertyPriceChart","useRecoilValue","useMemo","prices","pricePerSqm","x","start_datetime","substr","y","maxPrice","reduce","carry","max","Price","Number","toLocaleString","minimumFractionDigits","margin","top","right","bottom","left","xScale","format","precision","xFormat","yScale","stacked","sliceTooltip","slice","tooltip","points","point","moment","min","serieId","yFormatted","mode","median","axisBottom","tickValues","tickRotation","enablePoints","curve","useMesh","enableSlices","layers","AreaLayer","series","areaGenerator","innerHeight","area","d","y0","y1","curveMonotoneX","defs","background","color","lineWidth","spacing","rotation","fill","fillOpacity","stroke","strokeWidth","PropertyPriceChartContainer","Segment","basic","fallback","Message","negative","onError","notify","Suspense","Dimmer","active","Loader","MeanPriceInFilterLocation","momChange","yoyChange","Statistic","Value","statisticAddon","isFinite","textGreen","textRed","toFixed","parseInt","Label","MeanPriceInFilterLocationContainer","width","RentalYieldInFilterLocation","RentalYieldInFilterLocationContainer","SplitPaneLeft","locationName","find","as","highlightedText","Group","size","MapContext","React","createContext","center","lat","lng","containerStyle","Map","memo","props","useState","setMap","useLoadScript","googleMapsApiKey","isLoaded","loadError","context","useContext","onBoundsChanged","mapHeight","getDiv","clientHeight","percentage","document","getElementById","offsetTop","newBounds","nw","getBounds","getSouthWest","getNorthEast","ne","sw","se","setBounds","zoomControlOptions","google","maps","ControlPosition","RIGHT_TOP","rotateControl","scaleControl","streetViewControl","panControl","fullscreenControl","mapContainerStyle","zoom","onLoad","renderMap","useDebouncedQuery","query","nextConfig","time","nextConfigStr","debouncedIsLoading","setDebouncedLoading","undefined","previousData","setPreviousData","useDebounce","equalityFn","prev","next","config","useLazyQuery","performLazyQuery","loading","useDebouncedCallback","performDebouncedQuery","useEffect","useRegionParams","regionPolygon","bounds","locations","feature","polygonsOverlapping","geometry","coordinates","region","AreaOverview","children","year","currency","amount","label","extendMoment","Moment","range","utc","startOf","subtract","Date","dates","Array","from","by","excludeEnd","transformResponse","date","index","summary","PropertyPriceLine","gql","toISOString","clone","endOf","variables","custom","colors","axisLeft","enable","tickSize","enableGridX","enableGridY","defaultColors","GET_MEAN_PRICE","normalizeChartData","land_count","count","house_count","apartment_count","PropertyTypeChart","startDate","setColors","title","layout","enableLabel","keys","indexBy","animate","padding","state","newColors","PriceLabel","MapOverlay","error","isLoading","Grid","Column","computer","convertBoundsToRegionString","join","SplitPaneRight","setMapState","mapState","Provider","App","Container","githubCorner","grid","leftPanel","rightPanel","Boolean","hostname","match","ErrorBoundary","getPlugin","createErrorBoundary","ReactDOM","render","ApolloProvider","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f3a6ea1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticAddon\":\"MeanPriceInFilterLocation_statisticAddon__ZZijL\",\"textGreen\":\"MeanPriceInFilterLocation_textGreen__1TxZ3\",\"textRed\":\"MeanPriceInFilterLocation_textRed__2oGI9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"grid\":\"App_grid__3DnSg\",\"leftPanel\":\"App_leftPanel__3Hl9k\",\"rightPanel\":\"App_rightPanel__kN-EW\",\"githubCorner\":\"App_githubCorner__3BLKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"SplitPaneLeft_content__4SUVj\",\"highlightedText\":\"SplitPaneLeft_highlightedText__2q005\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currency\":\"AreaOverview_currency__1aglq\",\"label\":\"AreaOverview_label__1Cauv\",\"amount\":\"AreaOverview_amount__KkYcy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shake\":\"Navigation_shake__1loJY\",\"bell-shake\":\"Navigation_bell-shake__28FvC\",\"notificationLink\":\"Navigation_notificationLink__dwBb-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceChart_container__b6m2Q\",\"tooltip\":\"PropertyPriceChart_tooltip__iGhsd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceLine_container__3NyhK\",\"tooltip\":\"PropertyPriceLine_tooltip__1tDKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyTypeChart_container__3smv6\",\"title\":\"PropertyTypeChart_title__1REaR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MapOverlay_container__16kzn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterToolbar_container__3xqZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SplitPaneRight_container__x3kzx\"};","import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://api.brokalys.com',\n  }),\n});\n\nexport default client;\n","import Bugsnag from '@bugsnag/js';\nimport BugsnagPluginReact from '@bugsnag/plugin-react';\n\nBugsnag.start({\n  releaseStage: process.env.NODE_ENV,\n  enabledReleaseStages: ['production'],\n  apiKey: process.env.REACT_APP_BUGSNAG_KEY,\n  plugins: [new BugsnagPluginReact()],\n  collectUserIp: false,\n});\n\nexport default Bugsnag;\n","import { atom } from 'recoil';\n\nexport const filterState = atom({\n  key: 'filters',\n  default: {\n    category: 'apartment',\n    type: 'sell',\n    location: 'latvia-riga-vecpilseta',\n    priceType: 'total',\n  },\n});\n","import axios from 'axios';\nimport { selector, selectorFamily } from 'recoil';\n\nimport { filterState } from './state';\n\nconst getCategoryFilter = selector({\n  key: 'filters.category',\n  get: ({ get }) => get(filterState).category,\n});\nconst getTypeFilter = selector({\n  key: 'filters.type',\n  get: ({ get }) => get(filterState).type,\n});\nconst getLocationFilter = selector({\n  key: 'filters.location',\n  get: ({ get }) => get(filterState).location,\n});\nexport const getPriceTypeFilter = selector({\n  key: 'filters.priceType',\n  get: ({ get }) => get(filterState).priceType,\n});\n\nexport const getPrices = selectorFamily({\n  key: 'getPrices',\n  get: (filters) => async ({ get }) => {\n    const filterStr = encodeURIComponent(JSON.stringify(filters));\n\n    async function loadData() {\n      const { data } = await axios.get(\n        `https://static-api.brokalys.com/stats/monthly?discard=0.1&filters=${filterStr}`,\n      );\n      return data;\n    }\n\n    let runs = 0;\n\n    return new Promise(async function reloadPromise(resolve) {\n      const data = await loadData();\n\n      if (data.loadingResults === 0 || runs++ >= 3) {\n        return resolve(data);\n      }\n\n      setTimeout(\n        () => reloadPromise(resolve),\n        data.loadingResults <= 2 ? 1000 : 3000,\n      );\n    });\n  },\n});\n\nexport const getPricesInFilteredLocation = selector({\n  key: 'priceInFilteredLocation',\n  get: async ({ get }) => {\n    const location = get(getLocationFilter);\n    const type = get(getTypeFilter);\n    const category = get(getCategoryFilter);\n    return await get(\n      getPrices({ category, type, location_classificator: location }),\n    );\n  },\n});\n\nexport const getMeanPriceLastMonth = selector({\n  key: 'meanPriceLastMonth',\n  get: async ({ get }) => {\n    const location = get(getLocationFilter);\n    const type = get(getTypeFilter);\n    const category = get(getCategoryFilter);\n    const priceType = get(getPriceTypeFilter);\n    const { results: data } = await get(\n      getPrices({ category, type, location_classificator: location }),\n    );\n\n    const group = priceType === 'sqm' ? 'pricePerSqm' : 'price';\n\n    const {\n      [group]: { mean },\n    } = data[data.length - 1];\n\n    return {\n      price: mean,\n      change: {\n        mom: (1 - mean / data[data.length - 2][group].mean) * 100,\n        yoy: (1 - mean / data[data.length - 13][group].mean) * 100,\n      },\n    };\n  },\n});\n\nexport const getRentalYield = selector({\n  key: 'rentalYield',\n  get: async ({ get }) => {\n    const category = get(getCategoryFilter);\n    const location = get(getLocationFilter);\n    const priceType = get(getPriceTypeFilter);\n\n    const [{ results: sellData }, { results: rentData }] = await Promise.all([\n      get(\n        getPrices({ category, type: 'sell', location_classificator: location }),\n      ),\n      get(\n        getPrices({ category, type: 'rent', location_classificator: location }),\n      ),\n    ]);\n\n    const group = priceType === 'sqm' ? 'pricePerSqm' : 'price';\n\n    return (\n      (rentData[rentData.length - 1][group].mean /\n        sellData[sellData.length - 1][group].mean) *\n      100\n    );\n  },\n});\n","import { riga } from '@brokalys/location-json-schemas';\nimport React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { Dropdown, Menu } from 'semantic-ui-react';\nimport { transliterate } from 'transliteration';\n\nimport { filterState } from 'store';\nimport styles from './FilterToolbar.module.css';\n\nconst locationOptions = riga.features.map((row) => ({\n  value: row.properties.id,\n  text: row.properties.name,\n}));\n\nconst categoryOptions = [\n  { value: 'apartment', text: 'Apartment' },\n  { value: 'house', text: 'House' },\n  { value: 'land', text: 'Land' },\n];\nconst typeOptions = [\n  { value: 'sell', text: 'Sell' },\n  { value: 'rent', text: 'Rent' },\n];\nconst priceTypeOptions = [\n  { value: 'total', text: 'Total price' },\n  { value: 'sqm', text: 'Price/sqm' },\n];\n\nfunction FilterToolbar() {\n  const [, setFilters] = useRecoilState(filterState);\n\n  function onLocationChange(event, data) {\n    setFilters((currentFilters) => ({\n      ...currentFilters,\n      location: data.value,\n    }));\n  }\n\n  function onCategoryChange(event, data) {\n    setFilters((currentFilters) => ({\n      ...currentFilters,\n      category: data.value,\n    }));\n  }\n\n  function onTypeChange(event, data) {\n    setFilters((currentFilters) => ({\n      ...currentFilters,\n      type: data.value,\n    }));\n  }\n\n  function onPriceTypeChange(event, data) {\n    setFilters((currentFilters) => ({\n      ...currentFilters,\n      priceType: data.value,\n    }));\n  }\n\n  /**\n   * Improved search operation to ignore all UTF-8 characters.\n   */\n  function onSearch(all, selected) {\n    const regexp = new RegExp(transliterate(selected), 'i');\n    return all.filter((row) => regexp.test(transliterate(row.text)));\n  }\n\n  return (\n    <div className={styles.container}>\n      <Menu secondary>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select location\"\n            search={onSearch}\n            selection\n            defaultValue=\"latvia-riga-vecpilseta\"\n            options={locationOptions}\n            onChange={onLocationChange}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select category\"\n            fluid\n            selection\n            defaultValue=\"apartment\"\n            options={categoryOptions}\n            onChange={onCategoryChange}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select type\"\n            fluid\n            selection\n            defaultValue=\"sell\"\n            options={typeOptions}\n            onChange={onTypeChange}\n          />\n        </Menu.Item>\n\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select price type\"\n            fluid\n            selection\n            defaultValue=\"total\"\n            options={priceTypeOptions}\n            onChange={onPriceTypeChange}\n          />\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n}\n\nexport default FilterToolbar;\n","import FilterToolbar from './FilterToolbar';\n\nexport default FilterToolbar;\n","import React from 'react';\nimport { Button, Icon, Menu, Popup } from 'semantic-ui-react';\n\nimport styles from './Navigation.module.css';\n\nfunction Navigation() {\n  function onFeedbackClick() {\n    window.location.href = 'mailto:matiss@brokalys.com?subject=Feedback';\n  }\n\n  return (\n    <Menu secondary>\n      <Menu.Header>\n        <img src=\"https://brokalys.com/favicon.png\" alt=\"logo\" height=\"40px\" />\n      </Menu.Header>\n\n      <Menu.Item position=\"right\">\n        <Popup\n          content=\"Sign up for instant notifications about classifieds matching your parameters\"\n          inverted\n          position=\"bottom right\"\n          trigger={\n            <a\n              href=\"https://pinger.brokalys.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={styles.notificationLink}\n              data-testid=\"pinger-button\"\n            >\n              <Icon name=\"bell outline\" className={styles.shake} />\n            </a>\n          }\n        />\n      </Menu.Item>\n\n      {/*<Menu.Item fitted>\n        <Button basic animated=\"vertical\">\n          <Button.Content visible>Compare</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"crosshairs\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>*/}\n\n      <Menu.Item fitted>\n        <Button primary animated=\"vertical\" onClick={onFeedbackClick}>\n          <Button.Content visible>Give feedback</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"mail\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Navigation;\n","import Navigation from './Navigation';\n\nexport default Navigation;\n","import { area, curveMonotoneX } from 'd3-shape';\nimport { Defs } from '@nivo/core';\nimport React, { useMemo } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport Bugsnag from 'bugsnag';\nimport { getPricesInFilteredLocation, getPriceTypeFilter } from 'store';\nimport styles from './PropertyPriceChart.module.css';\n\nfunction PropertyPriceChart() {\n  const priceType = useRecoilValue(getPriceTypeFilter);\n  const { results } = useRecoilValue(getPricesInFilteredLocation);\n\n  const data = useMemo(\n    () => [\n      {\n        id: 'Average Price',\n        data: results.map((row) => {\n          const prices = priceType === 'sqm' ? row.pricePerSqm : row.price;\n          return {\n            ...prices,\n\n            x: row.start_datetime.substr(0, 10),\n            y: prices.mean,\n          };\n        }),\n      },\n    ],\n    [results, priceType],\n  );\n\n  const maxPrice = data[0].data.reduce(\n    (carry, { max }) => (max > carry ? max : carry),\n    0,\n  );\n\n  function Price({ value }) {\n    return (\n      <span>\n        {Number(value).toLocaleString('en', {\n          minimumFractionDigits: 2,\n        })}{' '}\n        {priceType === 'sqm' ? (\n          <span>\n            EUR/m<sup>2</sup>\n          </span>\n        ) : (\n          'EUR'\n        )}\n      </span>\n    );\n  }\n\n  return (\n    <ResponsiveLine\n      data={data}\n      margin={{ top: 10, right: 10, bottom: 100, left: 50 }}\n      xScale={{\n        type: 'time',\n        format: '%Y-%m-%d',\n        precision: 'month',\n      }}\n      xFormat=\"time:%Y-%m-%d\"\n      yScale={{\n        type: 'linear',\n        stacked: false,\n        max: maxPrice * 1.05,\n      }}\n      sliceTooltip={({ slice }) => {\n        return (\n          <div className={styles.tooltip}>\n            {slice.points.map((point) => (\n              <div key={point.id}>\n                <div>\n                  <strong>{moment(point.data.x).format('YYYY-MM-DD')}</strong>\n                </div>\n                <div>\n                  <strong>Min:</strong> <Price value={point.data.min} />\n                </div>\n                <div>\n                  <strong>{point.serieId}:</strong>{' '}\n                  <Price value={point.data.yFormatted} />\n                </div>\n                <div>\n                  <strong>Max:</strong> <Price value={point.data.max} />\n                </div>\n                <hr />\n                <div>\n                  <strong>Mode:</strong> <Price value={point.data.mode} />\n                </div>\n                <div>\n                  <strong>Median:</strong> <Price value={point.data.median} />\n                </div>\n              </div>\n            ))}\n          </div>\n        );\n      }}\n      axisBottom={{\n        format: '%Y-%m',\n        tickValues: 'every 2 months',\n        tickRotation: -90,\n      }}\n      enablePoints={true}\n      curve=\"monotoneX\"\n      useMesh={true}\n      enableSlices=\"x\"\n      layers={[\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        AreaLayer,\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n      ]}\n    />\n  );\n}\n\nfunction PropertyPriceChartContainer() {\n  return (\n    <Segment basic className={styles.container}>\n      <ErrorBoundary\n        fallback={\n          <Message negative>\n            Failed loading chart data. Please try again later.\n          </Message>\n        }\n        onError={Bugsnag.notify}\n      >\n        <React.Suspense\n          fallback={\n            <Dimmer inverted active>\n              <Loader />\n            </Dimmer>\n          }\n        >\n          <PropertyPriceChart />\n        </React.Suspense>\n      </ErrorBoundary>\n    </Segment>\n  );\n}\n\nfunction AreaLayer({ series, xScale, yScale, innerHeight }) {\n  const areaGenerator = area()\n    .x((d) => xScale(d.data.x))\n    .y0((d) => yScale(d.data.min))\n    .y1((d) => yScale(d.data.max))\n    .curve(curveMonotoneX);\n\n  return (\n    <>\n      <Defs\n        defs={[\n          {\n            id: 'pattern',\n            type: 'patternLines',\n            background: 'transparent',\n            color: '#3daff7',\n            lineWidth: 1,\n            spacing: 6,\n            rotation: -45,\n          },\n        ]}\n      />\n      <path\n        d={areaGenerator(series[0].data)}\n        fill=\"url(#pattern)\"\n        fillOpacity={0.2}\n        stroke=\"#3daff7\"\n        strokeWidth={0.4}\n      />\n    </>\n  );\n}\n\nexport default PropertyPriceChartContainer;\n","import PropertyPriceChart from './PropertyPriceChart';\n\nexport default PropertyPriceChart;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport Skeleton from 'react-loading-skeleton';\nimport { Statistic } from 'semantic-ui-react';\n\nimport { getMeanPriceLastMonth, getPriceTypeFilter } from 'store';\nimport styles from './MeanPriceInFilterLocation.module.css';\n\nfunction MeanPriceInFilterLocation() {\n  const priceType = useRecoilValue(getPriceTypeFilter);\n  const data = useRecoilValue(getMeanPriceLastMonth);\n\n  const mean = data.price;\n  const momChange = data.change.mom;\n  const yoyChange = data.change.yoy;\n\n  return (\n    <>\n      <Statistic.Value>\n        <div className={styles.statisticAddon}>\n          {isFinite(momChange) && (\n            <div>\n              <span\n                className={momChange < 0 ? styles.textGreen : styles.textRed}\n              >\n                {momChange < 0 ? '+' : ''}\n                {-momChange.toFixed(2)}%\n              </span>{' '}\n              MoM\n            </div>\n          )}\n          {isFinite(yoyChange) && (\n            <div>\n              <span\n                className={yoyChange < 0 ? styles.textGreen : styles.textRed}\n              >\n                {yoyChange < 0 ? '+' : ''}\n                {-yoyChange.toFixed(2)}%\n              </span>{' '}\n              YoY\n            </div>\n          )}\n        </div>\n\n        {parseInt(mean, 10).toLocaleString('en')}\n      </Statistic.Value>\n      <Statistic.Label>\n        Average Price (EUR\n        {priceType === 'sqm' ? (\n          <span>\n            /m<sup>2</sup>\n          </span>\n        ) : (\n          ''\n        )}\n        )\n      </Statistic.Label>\n    </>\n  );\n}\n\nfunction MeanPriceInFilterLocationContainer() {\n  return (\n    <Statistic>\n      <React.Suspense fallback={<Skeleton height={60} width={240} />}>\n        <MeanPriceInFilterLocation />\n      </React.Suspense>\n    </Statistic>\n  );\n}\n\nexport default MeanPriceInFilterLocationContainer;\n","import MeanPriceInFilterLocation from './MeanPriceInFilterLocation';\n\nexport default MeanPriceInFilterLocation;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport Skeleton from 'react-loading-skeleton';\nimport { Statistic } from 'semantic-ui-react';\n\nimport { getRentalYield } from 'store';\n\nfunction RentalYieldInFilterLocation() {\n  const data = useRecoilValue(getRentalYield);\n\n  return <Statistic.Value>{data.toFixed(2)}%</Statistic.Value>;\n}\n\nfunction RentalYieldInFilterLocationContainer() {\n  return (\n    <Statistic>\n      <React.Suspense fallback={<Skeleton height={42} />}>\n        <RentalYieldInFilterLocation />\n      </React.Suspense>\n      <Statistic.Label>Rental Yield</Statistic.Label>\n    </Statistic>\n  );\n}\n\nexport default RentalYieldInFilterLocationContainer;\n","import RentalYieldInFilterLocation from './RentalYieldInFilterLocation';\n\nexport default RentalYieldInFilterLocation;\n","import { riga } from '@brokalys/location-json-schemas';\nimport React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Header, Message, Statistic } from 'semantic-ui-react';\n\nimport Bugsnag from 'bugsnag';\nimport FilterToolbar from 'components/FilterToolbar';\nimport Navigation from 'components/Navigation';\nimport PropertyPriceChart from 'components/PropertyPriceChart';\nimport MeanPrice from 'components/Statistics/MeanPriceInFilterLocation';\nimport RentalYield from 'components/Statistics/RentalYieldInFilterLocation';\nimport { filterState } from 'store';\n\nimport styles from './SplitPaneLeft.module.css';\n\nfunction SplitPaneLeft() {\n  const [filters] = useRecoilState(filterState);\n  const locationName = riga.features.find(\n    (row) => row.properties.id === filters.location,\n  ).properties.name;\n\n  return (\n    <div className={styles.container}>\n      <Navigation />\n\n      <div className={styles.content}>\n        <Header as=\"h2\">\n          Average Prices in{' '}\n          <span className={styles.highlightedText}>{locationName}</span>\n        </Header>\n\n        <FilterToolbar />\n        <PropertyPriceChart />\n\n        <div>\n          <Header as=\"h3\">Last Month</Header>\n\n          <ErrorBoundary\n            fallback={\n              <Message negative>\n                Failed loading the data. Please try again later.\n              </Message>\n            }\n            onError={Bugsnag.notify}\n          >\n            <Statistic.Group size=\"small\">\n              <MeanPrice />\n              <RentalYield />\n            </Statistic.Group>\n          </ErrorBoundary>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SplitPaneLeft;\n","import SplitPaneLeft from './SplitPaneLeft';\n\nexport default SplitPaneLeft;\n","import React from 'react';\n\nconst MapContext = React.createContext();\n\nexport default MapContext;\n","import React, { useContext } from 'react';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\n\nimport MapContext from 'context/MapContext';\n\nconst center = {\n  lat: 56.9032640496857,\n  lng: 24.09330663700942,\n};\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n};\n\nfunction Map(props) {\n  const [map, setMap] = React.useState(null);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_KEY,\n  });\n\n  const context = useContext(MapContext);\n\n  /**\n   * Ignore the overlay when doing data lookups by region.\n   */\n  function onBoundsChanged() {\n    const mapHeight = map.getDiv().clientHeight;\n    const overlayHeight = document.getElementById('map-overlay').offsetTop;\n    const percentage = 1 - overlayHeight / mapHeight;\n\n    const newBounds = {\n      nw: {\n        lat:\n          map.getBounds().getSouthWest().lat() +\n          (map.getBounds().getNorthEast().lat() -\n            map.getBounds().getSouthWest().lat()) *\n            percentage,\n        lng: map.getBounds().getNorthEast().lng(),\n      },\n      ne: {\n        lat: map.getBounds().getNorthEast().lat(),\n        lng: map.getBounds().getNorthEast().lng(),\n      },\n\n      sw: {\n        lat:\n          map.getBounds().getSouthWest().lat() +\n          (map.getBounds().getNorthEast().lat() -\n            map.getBounds().getSouthWest().lat()) *\n            percentage,\n        lng: map.getBounds().getSouthWest().lng(),\n      },\n      se: {\n        lat: map.getBounds().getNorthEast().lat(),\n        lng: map.getBounds().getSouthWest().lng(),\n      },\n    };\n\n    context.setBounds(newBounds);\n  }\n\n  const renderMap = () => {\n    const options = {\n      zoomControlOptions: {\n        position: window.google.maps.ControlPosition.RIGHT_TOP,\n      },\n      rotateControl: false,\n      scaleControl: false,\n      streetViewControl: false,\n      panControl: false,\n      fullscreenControl: false,\n    };\n\n    return (\n      <GoogleMap\n        options={options}\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={11}\n        onLoad={setMap}\n        onBoundsChanged={onBoundsChanged}\n      />\n    );\n  };\n\n  if (loadError) {\n    return <div>Failed loading the map. Please try again later.</div>;\n  }\n\n  return isLoaded ? renderMap() : <div>Loading...</div>;\n}\n\nexport default React.memo(Map);\n","import Map from './Map';\n\nexport default Map;\n","import { useEffect, useState } from 'react';\nimport { useDebounce, useDebouncedCallback } from 'use-debounce';\nimport { useLazyQuery } from '@apollo/client';\n\nexport default function useDebouncedQuery(query, nextConfig, time = 1000) {\n  const nextConfigStr = JSON.stringify(nextConfig);\n  const [debouncedIsLoading, setDebouncedLoading] = useState(true);\n  const [previousData, setPreviousData] = useState(undefined);\n  const [config] = useDebounce(nextConfig, time, {\n    equalityFn: (prev, next) => JSON.stringify(prev) === JSON.stringify(next),\n  });\n\n  const [performLazyQuery, { loading, data }] = useLazyQuery(query, config);\n  const [performDebouncedQuery] = useDebouncedCallback(() => {\n    performLazyQuery();\n  }, time);\n\n  useEffect(() => {\n    setDebouncedLoading(true);\n    performDebouncedQuery();\n  }, [nextConfigStr, performDebouncedQuery]);\n\n  useEffect(() => {\n    if (loading === false && data) {\n      setDebouncedLoading(false);\n      setPreviousData(data);\n    }\n  }, [loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    loading: loading || debouncedIsLoading,\n    data: data || previousData,\n  };\n}\n","import { riga } from '@brokalys/location-json-schemas';\nimport { useContext, useMemo } from 'react';\nimport polygonsOverlapping from 'polygon-overlap';\n\nimport MapContext from 'context/MapContext';\n\nexport default function useRegionParams() {\n  const map = useContext(MapContext);\n  const regionPolygon = useMemo(() => {\n    return [\n      [map.bounds.nw.lng, map.bounds.nw.lat],\n      [map.bounds.ne.lng, map.bounds.ne.lat],\n      [map.bounds.sw.lng, map.bounds.sw.lat],\n      [map.bounds.se.lng, map.bounds.se.lat],\n    ];\n  }, [map.bounds]);\n\n  const locations = useMemo(() => {\n    return riga.features\n      .filter((feature) =>\n        polygonsOverlapping(feature.geometry.coordinates[0], regionPolygon),\n      )\n      .map((feature) => feature.properties.id);\n  }, [regionPolygon]);\n\n  return {\n    region: [map.region],\n    locations: locations.length > 10 ? undefined : locations,\n  };\n}\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nimport styles from './AreaOverview.module.css';\n\nfunction AreaOverview({ children, year }) {\n  return (\n    <div>\n      <Header as=\"h4\">Selected Area</Header>\n      <div>\n        <div className={styles.currency}>€</div>\n        <div className={styles.amount}>{children}</div>\n        <div className={styles.label}>Average Price last 30 days</div>\n      </div>\n    </div>\n  );\n}\n\nexport default AreaOverview;\n","import React, { useMemo } from 'react';\nimport { Dimmer, Loader, Segment } from 'semantic-ui-react';\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport { gql } from '@apollo/client';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport useDebouncedQuery from 'hooks/use-debounced-query';\nimport useRegionParams from 'hooks/use-region-params';\nimport styles from './PropertyPriceLine.module.css';\n\nconst moment = extendMoment(Moment);\nconst range = moment().range(\n  moment().utc().startOf('day').subtract(30, 'days'),\n  new Date(),\n);\nconst dates = Array.from(range.by('day', { excludeEnd: true }));\n\nconst GET_MEAN_PRICE = (dates) => gql`\n  query(\n    $type: String!\n    $region: [String!]!\n    $locations: [String!]\n  ) {\n    ${dates.map(\n      (date, id) => `\n      row_${id}: properties(\n        filter: {\n          type: { eq: $type }\n          published_at: {\n            gte: \"${date.toISOString()}\"\n            lte: \"${date.clone().endOf('day').toISOString()}\"\n          }\n          location_classificator: { in: $locations }\n          region: { in: $region }\n        }\n      ) {\n        summary {\n          price(discard: 0.1) {\n            mean\n          }\n        }\n      }\n    `,\n    )}\n  }\n`;\n\nfunction transformResponse(data) {\n  if (!data) {\n    return [];\n  }\n\n  return dates.map((date, index) => {\n    if (!data) {\n      return {};\n    }\n\n    return {\n      x: date.format('YYYY-MM-DD'),\n      y: data[`row_${index}`].summary.price.mean,\n    };\n  });\n}\n\nfunction PropertyPriceLine({ type }) {\n  const { region, locations } = useRegionParams();\n  const { loading, data: custom } = useDebouncedQuery(\n    GET_MEAN_PRICE(dates),\n    {\n      variables: {\n        type,\n        region,\n        locations,\n      },\n    },\n    2000,\n  );\n\n  const data = useMemo(\n    () => [\n      {\n        id: 'Average price',\n        data: transformResponse(custom),\n      },\n    ],\n    [custom],\n  );\n\n  return (\n    <Segment basic className={styles.container}>\n      <Dimmer inverted active={loading}>\n        <Loader />\n      </Dimmer>\n\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 5, right: 5, bottom: 5, left: 5 }}\n        xScale={{\n          type: 'time',\n          format: '%Y-%m-%d',\n          precision: 'day',\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          type: 'linear',\n          stacked: false,\n        }}\n        sliceTooltip={({ slice }) => {\n          return (\n            <div className={styles.tooltip}>\n              {slice.points.map((point) => (\n                <div key={point.id}>\n                  <div>\n                    <strong>{moment(point.data.x).format('YYYY-MM-DD')}</strong>\n                  </div>\n                  <div>\n                    <strong>{point.serieId}:</strong>{' '}\n                    {Number(point.data.yFormatted).toLocaleString('en', {\n                      minimumFractionDigits: 2,\n                    })}{' '}\n                    EUR\n                  </div>\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        colors={['#543193']}\n        axisLeft={{ enable: false, tickSize: 0 }}\n        axisBottom={false}\n        enableGridX={false}\n        enableGridY={false}\n        enablePoints={false}\n        curve=\"natural\"\n        useMesh={false}\n        enableSlices=\"x\"\n      />\n    </Segment>\n  );\n}\n\nexport default PropertyPriceLine;\n","import React, { useState } from 'react';\nimport { gql } from '@apollo/client';\nimport { Dimmer, Header, Loader, Segment } from 'semantic-ui-react';\nimport { ResponsiveBar } from '@nivo/bar';\n\nimport useDebouncedQuery from 'hooks/use-debounced-query';\nimport useRegionParams from 'hooks/use-region-params';\nimport styles from './PropertyTypeChart.module.css';\n\nconst defaultColor = '#543193';\nconst selectedColor = '#c0ace3';\nconst defaultColors = [defaultColor, defaultColor, defaultColor];\n\nconst GET_MEAN_PRICE = gql`\n  query(\n    $type: String!\n    $date: String!\n    $region: [String!]!\n    $locations: [String!]\n  ) {\n    mean_price: properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price(discard: 0.1) {\n          mean\n        }\n      }\n    }\n\n    apartment_count: properties(\n      filter: {\n        category: { eq: \"APARTMENT\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    house_count: properties(\n      filter: {\n        category: { eq: \"HOUSE\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    land_count: properties(\n      filter: {\n        category: { eq: \"LAND\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n  }\n`;\n\nfunction normalizeChartData(data) {\n  return [\n    {\n      category: 'Land',\n      value: data ? data.land_count.summary.count : 0,\n    },\n    {\n      category: 'House',\n      value: data ? data.house_count.summary.count : 0,\n    },\n    {\n      category: 'Apartment',\n      value: data ? data.apartment_count.summary.count : 0,\n    },\n  ];\n}\n\nfunction PropertyTypeChart({ type, startDate }) {\n  const { region, locations } = useRegionParams();\n\n  const { loading, data } = useDebouncedQuery(\n    GET_MEAN_PRICE,\n    {\n      variables: {\n        type,\n        date: startDate,\n        region,\n        locations,\n      },\n    },\n    1000,\n  );\n  const [colors, setColors] = useState(defaultColors);\n\n  function onClick({ index }) {\n    setColors((state) => {\n      if (state[index] === selectedColor) {\n        return defaultColors;\n      }\n\n      const newColors = [...defaultColors];\n      newColors[index] = selectedColor;\n      return newColors;\n    });\n  }\n\n  return (\n    <div>\n      <Header as=\"h4\" className={styles.title}>\n        Property type distribution\n      </Header>\n      <Segment basic className={styles.container}>\n        <Dimmer inverted active={loading}>\n          <Loader />\n        </Dimmer>\n\n        <ResponsiveBar\n          data={normalizeChartData(data)}\n          layout=\"horizontal\"\n          enableGridY={false}\n          enableLabel={false}\n          axisLeft={{ tickSize: 0 }}\n          axisBottom={false}\n          keys={['value']}\n          indexBy=\"category\"\n          margin={{ top: 0, right: 0, bottom: 0, left: 60 }}\n          animate={true}\n          colors={colors}\n          padding={0.4}\n          onClick={onClick}\n        />\n      </Segment>\n    </div>\n  );\n}\n\nexport default PropertyTypeChart;\n","import React, { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { gql } from '@apollo/client';\nimport { Grid, Header } from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport useDebouncedQuery from 'hooks/use-debounced-query';\nimport useRegionParams from 'hooks/use-region-params';\nimport AreaOverview from './components/AreaOverview';\nimport PropertyPriceLine from './components/PropertyPriceLine';\nimport PropertyTypeChart from './components/PropertyTypeChart';\n\nimport styles from './MapOverlay.module.css';\n\nconst GET_MEAN_PRICE = gql`\n  query(\n    $type: String!\n    $date: String!\n    $region: [String!]!\n    $locations: [String!]\n  ) {\n    properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price(discard: 0.1) {\n          mean\n        }\n      }\n    }\n  }\n`;\n\nfunction PriceLabel({ price }) {\n  if (!price) {\n    return 'Unknown';\n  }\n\n  return parseInt(price, 10).toLocaleString('en');\n}\n\nfunction MapOverlay() {\n  const { region, locations } = useRegionParams();\n  const [startDate] = useState(\n    moment().subtract(30, 'days').format('YYYY-MM-DD'),\n  );\n  const [type] = useState('sell'); // @todo: dynamic\n  const { loading, error, data } = useDebouncedQuery(\n    GET_MEAN_PRICE,\n    {\n      variables: {\n        type: type,\n        date: startDate,\n        region,\n        locations,\n      },\n    },\n    1000,\n  );\n\n  const isLoading = loading || !data;\n\n  if (error) {\n    return (\n      <div className={styles.container}>\n        <Header as=\"h4\">\n          An unexpected error occured when attempting to fetch the data. Try\n          again later.\n        </Header>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container} id=\"map-overlay\">\n      <Grid>\n        <Grid.Column computer={8}>\n          <AreaOverview>\n            {isLoading ? (\n              <Skeleton />\n            ) : (\n              <PriceLabel price={data.properties.summary.price.mean} />\n            )}\n          </AreaOverview>\n\n          <PropertyPriceLine type={type} />\n        </Grid.Column>\n        <Grid.Column computer={8}>\n          <PropertyTypeChart type={type} startDate={startDate} />\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n}\n\nexport default MapOverlay;\n","import MapOverlay from './MapOverlay';\n\nexport default MapOverlay;\n","import React, { useState } from 'react';\n\nimport Map from 'components/Map';\nimport MapOverlay from 'components/MapOverlay';\nimport MapContext from 'context/MapContext';\n\nimport styles from './SplitPaneRight.module.css';\n\nfunction convertBoundsToRegionString(bounds) {\n  const parts = [\n    [bounds.ne.lat, bounds.ne.lng].join(' '),\n    [bounds.nw.lat, bounds.nw.lng].join(' '),\n    [bounds.sw.lat, bounds.sw.lng].join(' '),\n    [bounds.se.lat, bounds.se.lng].join(' '),\n    [bounds.ne.lat, bounds.ne.lng].join(' '),\n  ];\n  return parts.join(', ');\n}\n\nfunction SplitPaneRight() {\n  const [mapState, setMapState] = useState({\n    setBounds,\n    bounds: {\n      ne: {},\n      nw: {},\n      se: {},\n      sw: {},\n    },\n    region: '',\n  });\n\n  function setBounds(bounds) {\n    setMapState((state) => ({\n      ...state,\n      bounds,\n      region: convertBoundsToRegionString(bounds),\n    }));\n  }\n\n  return (\n    <div className={styles.container}>\n      <MapContext.Provider value={mapState}>\n        <Map />\n        <MapOverlay />\n      </MapContext.Provider>\n    </div>\n  );\n}\n\nexport default SplitPaneRight;\n","import SplitPaneRight from './SplitPaneRight';\n\nexport default SplitPaneRight;\n","import React from 'react';\nimport GithubCorner from 'react-github-corner';\nimport { Container, Grid } from 'semantic-ui-react';\n\nimport SplitPaneLeft from 'containers/SplitPaneLeft';\nimport SplitPaneRight from 'containers/SplitPaneRight';\n\nimport styles from './App.module.css';\n\nfunction App(props) {\n  return (\n    <Container fluid className={styles.container}>\n      <GithubCorner\n        className={styles.githubCorner}\n        href=\"https://github.com/brokalys/map-app\"\n      />\n\n      <Grid className={styles.grid}>\n        <Grid.Column computer={9} className={styles.leftPanel}>\n          <SplitPaneLeft />\n        </Grid.Column>\n        <Grid.Column computer={7} className={styles.rightPanel}>\n          <SplitPaneRight />\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ApolloProvider } from '@apollo/client';\n\nimport client from './apollo-client';\nimport App from './App.jsx';\nimport Bugsnag from './bugsnag';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nconst ErrorBoundary = Bugsnag.getPlugin('react').createErrorBoundary(React);\n\nReactDOM.render(\n  <ErrorBoundary>\n    <RecoilRoot>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </RecoilRoot>\n  </ErrorBoundary>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}