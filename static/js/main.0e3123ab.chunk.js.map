{"version":3,"sources":["components/Statistics/MedianPriceInFilterLocation/MedianPriceInFilterLocation.module.css","App.module.css","containers/SplitPaneLeft/SplitPaneLeft.module.css","components/MapOverlay/components/AreaOverview.module.css","components/Navigation/Navigation.module.css","components/PropertyPriceChart/PropertyPriceChart.module.css","components/MapOverlay/components/PropertyPriceLine.module.css","components/MapOverlay/components/PropertyTypeChart.module.css","components/MapOverlay/MapOverlay.module.css","components/FilterToolbar/FilterToolbar.module.css","containers/SplitPaneRight/SplitPaneRight.module.css","apollo-client.js","recoil/filters.js","components/FilterToolbar/FilterToolbar.jsx","components/FilterToolbar/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","recoil/selectors.js","components/PropertyPriceChart/PropertyPriceChart.jsx","components/PropertyPriceChart/index.js","components/Statistics/MedianPriceInFilterLocation/MedianPriceInFilterLocation.jsx","components/Statistics/MedianPriceInFilterLocation/index.js","components/Statistics/RentalYieldInFilterLocation/RentalYieldInFilterLocation.jsx","components/Statistics/RentalYieldInFilterLocation/index.js","containers/SplitPaneLeft/SplitPaneLeft.jsx","containers/SplitPaneLeft/index.js","context/MapContext.js","components/Map/Map.jsx","components/Map/index.js","hooks/use-debounced-query.js","components/MapOverlay/components/AreaOverview.jsx","components/MapOverlay/components/PropertyPriceLine.jsx","components/MapOverlay/components/PropertyTypeChart.jsx","components/MapOverlay/MapOverlay.jsx","components/MapOverlay/index.js","containers/SplitPaneRight/SplitPaneRight.jsx","containers/SplitPaneRight/index.js","App.jsx","bugsnag.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["module","exports","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","atom","key","default","category","type","location","locationOptions","rigaGeojson","features","map","row","value","properties","apkaime","text","categoryOptions","typeOptions","FilterToolbar","useRecoilState","filterState","setFilters","className","styles","container","Menu","secondary","Item","fitted","Dropdown","placeholder","search","all","selected","regexp","RegExp","transliterate","filter","test","selection","defaultValue","options","onChange","event","data","currentFilters","fluid","Navigation","Header","src","alt","height","position","Popup","content","inverted","trigger","href","target","rel","notificationLink","Icon","name","shake","Button","primary","animated","onClick","window","Content","visible","hidden","getCategoryFilter","selector","get","filtersState","getTypeFilter","getLocationFilter","getPrices","a","axios","csvString","csv","parse","header","shift","locations","index","prices","price","start","end","parseInt","reduce","carry","getPricesInFilteredLocation","getMedianPriceLastMonth","length","change","mom","yoy","getRentalYield","rentData","sellData","PropertyPriceChart","responseData","useRecoilValue","useMemo","id","x","y","margin","top","right","bottom","left","xScale","format","precision","xFormat","yScale","stacked","sliceTooltip","slice","tooltip","points","point","moment","serieId","Number","yFormatted","toLocaleString","minimumFractionDigits","axisBottom","tickValues","tickRotation","enablePoints","curve","useMesh","enableSlices","PropertyPriceChartContainer","Segment","basic","fallback","Message","negative","Suspense","Dimmer","active","Loader","MedianPriceInFilterLocation","median","momChange","yoyChange","statisticAddon","isFinite","textGreen","textRed","toFixed","MedianPriceInFilterLocationContainer","Statistic","Value","Label","RentalYieldInFilterLocation","RentalYieldInFilterLocationContainer","SplitPaneLeft","filters","as","highlightedText","Group","size","MapContext","React","createContext","Map","props","context","useContext","bootstrapURLKeys","process","defaultCenter","lat","lng","defaultZoom","disableDefaultUI","bounds","mapHeight","percentage","document","getElementById","offsetTop","newBounds","nw","ne","sw","se","setBounds","useDebouncedQuery","query","nextConfig","time","nextConfigStr","JSON","stringify","useState","debouncedIsLoading","setDebouncedLoading","undefined","previousData","setPreviousData","useDebounce","equalityFn","prev","next","config","useLazyQuery","performLazyQuery","loading","useDebouncedCallback","performDebouncedQuery","useEffect","AreaOverview","children","year","currency","amount","label","extendMoment","Moment","range","utc","startOf","subtract","Date","dates","Array","from","by","excludeEnd","transformResponse","date","summary","PropertyPriceLine","gql","toISOString","clone","endOf","variables","region","custom","colors","axisLeft","enable","tickSize","enableGridX","enableGridY","defaultColors","GET_MEDIAN_PRICE","normalizeChartData","land_count","count","house_count","apartment_count","PropertyTypeChart","startDate","setColors","title","layout","enableLabel","keys","indexBy","animate","padding","state","newColors","PriceLabel","MapOverlay","error","isLoading","Grid","Column","computer","convertBoundsToRegionString","join","SplitPaneRight","setMapState","mapState","Provider","App","Container","grid","leftPanel","rightPanel","Bugsnag","releaseStage","enabledReleaseStages","apiKey","plugins","BugsnagPluginReact","collectUserIp","Boolean","hostname","match","ErrorBoundary","getPlugin","createErrorBoundary","ReactDOM","render","StrictMode","ApolloProvider","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0e3123ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticAddon\":\"MedianPriceInFilterLocation_statisticAddon__3nQOo\",\"textGreen\":\"MedianPriceInFilterLocation_textGreen__bthaA\",\"textRed\":\"MedianPriceInFilterLocation_textRed__3zWCd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"grid\":\"App_grid__3DnSg\",\"leftPanel\":\"App_leftPanel__3Hl9k\",\"rightPanel\":\"App_rightPanel__kN-EW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"SplitPaneLeft_content__4SUVj\",\"highlightedText\":\"SplitPaneLeft_highlightedText__2q005\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currency\":\"AreaOverview_currency__1aglq\",\"label\":\"AreaOverview_label__1Cauv\",\"amount\":\"AreaOverview_amount__KkYcy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shake\":\"Navigation_shake__1loJY\",\"bell-shake\":\"Navigation_bell-shake__28FvC\",\"notificationLink\":\"Navigation_notificationLink__dwBb-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceChart_container__b6m2Q\",\"tooltip\":\"PropertyPriceChart_tooltip__iGhsd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceLine_container__3NyhK\",\"tooltip\":\"PropertyPriceLine_tooltip__1tDKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyTypeChart_container__3smv6\",\"title\":\"PropertyTypeChart_title__1REaR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MapOverlay_container__16kzn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterToolbar_container__3xqZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SplitPaneRight_container__x3kzx\"};","import { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"https://api.brokalys.com\",\n  }),\n});\n\nexport default client;\n","import { atom } from \"recoil\";\n\nexport default atom({\n  key: \"filters\",\n  default: {\n    category: \"apartment\",\n    type: \"sell\",\n    location: \"Centrs\",\n  },\n});\n","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport { transliterate } from \"transliteration\";\n\nimport rigaGeojson from \"data/riga-geojson.json\";\nimport filterState from \"recoil/filters\";\nimport styles from \"./FilterToolbar.module.css\";\n\nconst locationOptions = rigaGeojson.features.map((row) => ({\n  value: row.properties.apkaime,\n  text: row.properties.apkaime,\n}));\n\nconst categoryOptions = [\n  { value: \"apartment\", text: \"Apartment\" },\n  { value: \"house\", text: \"House\" },\n  { value: \"land\", text: \"Land\" },\n];\nconst typeOptions = [\n  { value: \"sell\", text: \"Sell\" },\n  { value: \"rent\", text: \"Rent\" },\n];\n\nfunction FilterToolbar() {\n  const [, setFilters] = useRecoilState(filterState);\n\n  function onLocationChange(event, data) {\n    setFilters((currentFilters) => ({\n      ...currentFilters,\n      location: data.value,\n    }));\n  }\n\n  function onCategoryChange(event, data) {\n    setFilters((currentFilters) => ({\n      ...currentFilters,\n      category: data.value,\n    }));\n  }\n\n  function onTypeChange(event, data) {\n    setFilters((currentFilters) => ({\n      ...currentFilters,\n      type: data.value,\n    }));\n  }\n\n  /**\n   * Improved search operation to ignore all UTF-8 characters.\n   */\n  function onSearch(all, selected) {\n    const regexp = new RegExp(transliterate(selected), \"i\");\n    return all.filter((row) => regexp.test(transliterate(row.text)));\n  }\n\n  return (\n    <div className={styles.container}>\n      <Menu secondary>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select location\"\n            search={onSearch}\n            selection\n            defaultValue=\"Centrs\"\n            options={locationOptions}\n            onChange={onLocationChange}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select category\"\n            fluid\n            selection\n            defaultValue=\"apartment\"\n            options={categoryOptions}\n            onChange={onCategoryChange}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select type\"\n            fluid\n            selection\n            defaultValue=\"sell\"\n            options={typeOptions}\n            onChange={onTypeChange}\n          />\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n}\n\nexport default FilterToolbar;\n","import FilterToolbar from \"./FilterToolbar\";\n\nexport default FilterToolbar;\n","import React from \"react\";\nimport { Button, Icon, Menu, Popup } from \"semantic-ui-react\";\n\nimport styles from \"./Navigation.module.css\";\n\nfunction Navigation() {\n  function onFeedbackClick() {\n    window.location.href = \"mailto:matiss@brokalys.com?subject=Feedback\";\n  }\n\n  return (\n    <Menu secondary>\n      <Menu.Header>\n        <img src=\"https://brokalys.com/favicon.png\" alt=\"logo\" height=\"40px\" />\n      </Menu.Header>\n\n      <Menu.Item position=\"right\">\n        <Popup\n          content=\"Sign up for instant notifications about classifieds matching your parameters\"\n          inverted\n          position=\"bottom right\"\n          trigger={\n            <a\n              href=\"https://pinger.brokalys.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={styles.notificationLink}\n            >\n              <Icon name=\"bell outline\" className={styles.shake} />\n            </a>\n          }\n        />\n      </Menu.Item>\n\n      {/*<Menu.Item fitted>\n        <Button basic animated=\"vertical\">\n          <Button.Content visible>Compare</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"crosshairs\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>*/}\n\n      <Menu.Item fitted>\n        <Button primary animated=\"vertical\" onClick={onFeedbackClick}>\n          <Button.Content visible>Give feedback</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"mail\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Navigation;\n","import Navigation from \"./Navigation\";\n\nexport default Navigation;\n","import axios from \"axios\";\nimport { selector } from \"recoil\";\nimport parse from \"csv-parse/lib/sync\";\n\nimport filtersState from \"./filters\";\n\nconst getCategoryFilter = selector({\n  key: \"filters.category\",\n  get: ({ get }) => get(filtersState).category,\n});\nconst getTypeFilter = selector({\n  key: \"filters.type\",\n  get: ({ get }) => get(filtersState).type,\n});\nconst getLocationFilter = selector({\n  key: \"filters.location\",\n  get: ({ get }) => get(filtersState).location,\n});\n\nexport const getPrices = async (category, type) => {\n  const { data: csvString } = await axios.get(\n    `https://raw.githubusercontent.com/brokalys/data/master/data/${category}/${type}-monthly-riga.csv`\n  );\n\n  const csv = parse(csvString);\n  const header = csv.shift();\n  const [, , ...locations] = header;\n\n  return locations\n    .map((row, index) => ({\n      location: row,\n      prices: csv.map((price) => ({\n        start: price[0],\n        end: price[1],\n        value: parseInt(price[index + 2]),\n      })),\n    }))\n    .reduce((carry, row) => ({ ...carry, [row.location]: row.prices }), {});\n};\n\nexport const getPricesInFilteredLocation = selector({\n  key: \"priceInFilteredLocation\",\n  get: async ({ get }) => {\n    const location = get(getLocationFilter);\n    const type = get(getTypeFilter);\n    const category = get(getCategoryFilter);\n    const data = await getPrices(category, type);\n    return data[location];\n  },\n});\n\nexport const getMedianPriceLastMonth = selector({\n  key: \"medianPriceLastMonth\",\n  get: async ({ get }) => {\n    const data = await get(getPricesInFilteredLocation);\n    const { value } = data[data.length - 1];\n\n    return {\n      price: value,\n      change: {\n        mom: (1 - value / data[data.length - 2].value) * 100,\n        yoy: (1 - value / data[data.length - 13].value) * 100,\n      },\n    };\n  },\n});\n\nexport const getRentalYield = selector({\n  key: \"rentalYield\",\n  get: async ({ get }) => {\n    const category = get(getCategoryFilter);\n    const location = get(getLocationFilter);\n\n    const rentData = (await getPrices(category, \"rent\"))[location];\n    const sellData = (await getPrices(category, \"sell\"))[location];\n    return (\n      (rentData[rentData.length - 1].value /\n        sellData[sellData.length - 1].value) *\n      100\n    );\n  },\n});\n","import React, { useMemo } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { Dimmer, Loader, Message, Segment } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport { ResponsiveLine } from \"@nivo/line\";\n\nimport { getPricesInFilteredLocation } from \"recoil/selectors\";\nimport styles from \"./PropertyPriceChart.module.css\";\n\nfunction PropertyPriceChart() {\n  const responseData = useRecoilValue(getPricesInFilteredLocation);\n\n  const data = useMemo(\n    () => [\n      {\n        id: \"Median Price\",\n        data: responseData.map((row) => ({\n          x: row.start,\n          y: row.value > 0 ? row.value : null,\n        })),\n      },\n    ],\n    [responseData]\n  );\n\n  return (\n    <ResponsiveLine\n      data={data}\n      margin={{ top: 10, right: 10, bottom: 100, left: 50 }}\n      xScale={{\n        type: \"time\",\n        format: \"%Y-%m-%d\",\n        precision: \"month\",\n      }}\n      xFormat=\"time:%Y-%m-%d\"\n      yScale={{\n        type: \"linear\",\n        stacked: false,\n      }}\n      sliceTooltip={({ slice }) => {\n        return (\n          <div className={styles.tooltip}>\n            {slice.points.map((point) => (\n              <div key={point.id}>\n                <div>\n                  <strong>{moment(point.data.x).format(\"YYYY-MM-DD\")}</strong>\n                </div>\n                <div>\n                  <strong>{point.serieId}:</strong>{\" \"}\n                  {Number(point.data.yFormatted).toLocaleString(\"en\", {\n                    minimumFractionDigits: 2,\n                  })}{\" \"}\n                  EUR\n                </div>\n              </div>\n            ))}\n          </div>\n        );\n      }}\n      axisBottom={{\n        format: \"%Y-%m\",\n        tickValues: \"every 2 months\",\n        tickRotation: -90,\n      }}\n      enablePoints={true}\n      curve=\"monotoneX\"\n      useMesh={true}\n      enableSlices=\"x\"\n    />\n  );\n}\n\nfunction PropertyPriceChartContainer() {\n  return (\n    <Segment basic className={styles.container}>\n      <ErrorBoundary\n        fallback={\n          <Message negative>\n            Failed loading chart data. Please try again later.\n          </Message>\n        }\n      >\n        <React.Suspense\n          fallback={\n            <Dimmer inverted active>\n              <Loader />\n            </Dimmer>\n          }\n        >\n          <PropertyPriceChart />\n        </React.Suspense>\n      </ErrorBoundary>\n    </Segment>\n  );\n}\n\nexport default PropertyPriceChartContainer;\n","import PropertyPriceChart from \"./PropertyPriceChart\";\n\nexport default PropertyPriceChart;\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { Statistic } from \"semantic-ui-react\";\n\nimport { getMedianPriceLastMonth } from \"recoil/selectors\";\nimport styles from \"./MedianPriceInFilterLocation.module.css\";\n\nfunction MedianPriceInFilterLocation() {\n  const data = useRecoilValue(getMedianPriceLastMonth);\n\n  const median = data.price;\n  const momChange = data.change.mom;\n  const yoyChange = data.change.yoy;\n\n  return (\n    <div>\n      <div className={styles.statisticAddon}>\n        {isFinite(momChange) && (\n          <div>\n            <span className={momChange < 0 ? styles.textGreen : styles.textRed}>\n              {momChange < 0 ? \"+\" : \"\"}\n              {-momChange.toFixed(2)}%\n            </span>{\" \"}\n            MoM\n          </div>\n        )}\n        {isFinite(yoyChange) && (\n          <div>\n            <span className={yoyChange < 0 ? styles.textGreen : styles.textRed}>\n              {yoyChange < 0 ? \"+\" : \"\"}\n              {-yoyChange.toFixed(2)}%\n            </span>{\" \"}\n            YoY\n          </div>\n        )}\n      </div>\n\n      {parseInt(median, 10).toLocaleString(\"en\")}\n    </div>\n  );\n}\n\nfunction MedianPriceInFilterLocationContainer() {\n  return (\n    <Statistic>\n      <Statistic.Value>\n        <React.Suspense fallback={<Skeleton height={42} />}>\n          <MedianPriceInFilterLocation />\n        </React.Suspense>\n      </Statistic.Value>\n      <Statistic.Label>\n        Median Price (EUR/m<sup>2</sup>)\n      </Statistic.Label>\n    </Statistic>\n  );\n}\n\nexport default MedianPriceInFilterLocationContainer;\n","import MedianPriceInFilterLocation from \"./MedianPriceInFilterLocation\";\n\nexport default MedianPriceInFilterLocation;\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { Statistic } from \"semantic-ui-react\";\n\nimport { getRentalYield } from \"recoil/selectors\";\n\nfunction RentalYieldInFilterLocation() {\n  const data = useRecoilValue(getRentalYield);\n\n  return <Statistic.Value>{data.toFixed(2)}%</Statistic.Value>;\n}\n\nfunction RentalYieldInFilterLocationContainer() {\n  return (\n    <Statistic>\n      <React.Suspense fallback={<Skeleton height={42} />}>\n        <RentalYieldInFilterLocation />\n      </React.Suspense>\n      <Statistic.Label>Rental Yield</Statistic.Label>\n    </Statistic>\n  );\n}\n\nexport default RentalYieldInFilterLocationContainer;\n","import RentalYieldInFilterLocation from \"./RentalYieldInFilterLocation\";\n\nexport default RentalYieldInFilterLocation;\n","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { Header, Message, Statistic } from \"semantic-ui-react\";\n\nimport FilterToolbar from \"components/FilterToolbar\";\nimport Navigation from \"components/Navigation\";\nimport PropertyPriceChart from \"components/PropertyPriceChart\";\nimport MedianPrice from \"components/Statistics/MedianPriceInFilterLocation\";\nimport RentalYield from \"components/Statistics/RentalYieldInFilterLocation\";\nimport filterState from \"recoil/filters\";\n\nimport styles from \"./SplitPaneLeft.module.css\";\n\nfunction SplitPaneLeft() {\n  const [filters] = useRecoilState(filterState);\n\n  return (\n    <div className={styles.container}>\n      <Navigation />\n\n      <div className={styles.content}>\n        <Header as=\"h2\">\n          Median Prices in{\" \"}\n          <span className={styles.highlightedText}>{filters.location}</span>\n        </Header>\n\n        <FilterToolbar />\n        <PropertyPriceChart />\n\n        <div>\n          <Header as=\"h3\">Last Month</Header>\n\n          <ErrorBoundary\n            fallback={\n              <Message negative>\n                Failed loading the data. Please try again later.\n              </Message>\n            }\n          >\n            <Statistic.Group size=\"small\">\n              <MedianPrice />\n              <RentalYield />\n            </Statistic.Group>\n          </ErrorBoundary>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SplitPaneLeft;\n","import SplitPaneLeft from \"./SplitPaneLeft\";\n\nexport default SplitPaneLeft;\n","import React from \"react\";\n\nconst MapContext = React.createContext();\n\nexport default MapContext;\n","import React, { useContext } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\n\nimport MapContext from \"context/MapContext\";\n\nfunction Map(props) {\n  const context = useContext(MapContext);\n\n  /**\n   * Ignore the overlay when doing data lookups by region.\n   */\n  function onChange(map) {\n    const { bounds } = map;\n\n    const mapHeight = map.size.height;\n    const overlayHeight = document.getElementById(\"map-overlay\").offsetTop;\n    const percentage = 1 - overlayHeight / mapHeight;\n\n    const newBounds = {\n      nw: bounds.nw,\n      ne: bounds.ne,\n\n      sw: {\n        lat: bounds.sw.lat + (bounds.nw.lat - bounds.sw.lat) * percentage,\n        lng: bounds.sw.lng,\n      },\n      se: {\n        lat: bounds.se.lat + (bounds.nw.lat - bounds.se.lat) * percentage,\n        lng: bounds.se.lng,\n      },\n    };\n\n    context.setBounds(newBounds);\n  }\n\n  return (\n    <GoogleMapReact\n      bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_KEY }}\n      defaultCenter={{\n        lat: 56.879635,\n        lng: 24.603189,\n      }}\n      defaultZoom={7}\n      options={{\n        disableDefaultUI: true,\n      }}\n      onChange={onChange}\n    />\n  );\n}\n\nexport default Map;\n","import Map from \"./Map\";\n\nexport default Map;\n","import { useEffect, useState } from \"react\";\nimport { useDebounce, useDebouncedCallback } from \"use-debounce\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nexport default function useDebouncedQuery(query, nextConfig, time = 1000) {\n  const nextConfigStr = JSON.stringify(nextConfig);\n  const [debouncedIsLoading, setDebouncedLoading] = useState(true);\n  const [previousData, setPreviousData] = useState(undefined);\n  const [config] = useDebounce(nextConfig, time, {\n    equalityFn: (prev, next) => JSON.stringify(prev) === JSON.stringify(next),\n  });\n\n  const [performLazyQuery, { loading, data }] = useLazyQuery(query, config);\n  const [performDebouncedQuery] = useDebouncedCallback(() => {\n    performLazyQuery();\n  }, time);\n\n  useEffect(() => {\n    setDebouncedLoading(true);\n    performDebouncedQuery();\n  }, [nextConfigStr, performDebouncedQuery]);\n\n  useEffect(() => {\n    if (loading === false && data) {\n      setDebouncedLoading(false);\n      setPreviousData(data);\n    }\n  }, [loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    loading: loading || debouncedIsLoading,\n    data: data || previousData,\n  };\n}\n","import React from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\nimport styles from \"./AreaOverview.module.css\";\n\nfunction AreaOverview({ children, year }) {\n  return (\n    <div>\n      <Header as=\"h4\">Selected Area</Header>\n      <div>\n        <div className={styles.currency}>€</div>\n        <div className={styles.amount}>{children}</div>\n        <div className={styles.label}>Median Price last 30 days</div>\n      </div>\n    </div>\n  );\n}\n\nexport default AreaOverview;\n","import React, { useContext, useMemo } from \"react\";\nimport { Dimmer, Loader, Segment } from \"semantic-ui-react\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { gql } from \"@apollo/client\";\nimport { ResponsiveLine } from \"@nivo/line\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport styles from \"./PropertyPriceLine.module.css\";\n\nconst moment = extendMoment(Moment);\nconst range = moment().range(\n  moment().utc().startOf(\"day\").subtract(30, \"days\"),\n  new Date()\n);\nconst dates = Array.from(range.by(\"day\", { excludeEnd: true }));\n\nconst GET_MEDIAN_PRICE = (dates) => gql`\n  query(\n    $type: String!\n    $region: [String!]!\n  ) {\n    ${dates.map(\n      (date, id) => `\n      row_${id}: properties(\n        filter: {\n          type: { eq: $type }\n          published_at: {\n            gte: \"${date.toISOString()}\"\n            lte: \"${date.clone().endOf(\"day\").toISOString()}\"\n          }\n          region: { in: $region }\n        }\n      ) {\n        summary {\n          price {\n            median\n          }\n        }\n      }\n    `\n    )}\n  }\n`;\n\nfunction transformResponse(data) {\n  if (!data) {\n    return [];\n  }\n\n  return dates.map((date, index) => {\n    if (!data) {\n      return {};\n    }\n\n    return {\n      x: date.format(\"YYYY-MM-DD\"),\n      y: data[`row_${index}`].summary.price.median,\n    };\n  });\n}\n\nfunction PropertyPriceLine({ type }) {\n  const map = useContext(MapContext);\n  const { loading, data: custom } = useDebouncedQuery(\n    GET_MEDIAN_PRICE(dates),\n    {\n      variables: {\n        type,\n        region: [map.region],\n      },\n    },\n    2000\n  );\n\n  const data = useMemo(\n    () => [\n      {\n        id: \"Median price\",\n        data: transformResponse(custom),\n      },\n    ],\n    [custom]\n  );\n\n  return (\n    <Segment basic className={styles.container}>\n      <Dimmer inverted active={loading}>\n        <Loader />\n      </Dimmer>\n\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 5, right: 5, bottom: 5, left: 5 }}\n        xScale={{\n          type: \"time\",\n          format: \"%Y-%m-%d\",\n          precision: \"day\",\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          type: \"linear\",\n          stacked: false,\n        }}\n        sliceTooltip={({ slice }) => {\n          return (\n            <div className={styles.tooltip}>\n              {slice.points.map((point) => (\n                <div key={point.id}>\n                  <div>\n                    <strong>{moment(point.data.x).format(\"YYYY-MM-DD\")}</strong>\n                  </div>\n                  <div>\n                    <strong>{point.serieId}:</strong>{\" \"}\n                    {Number(point.data.yFormatted).toLocaleString(\"en\", {\n                      minimumFractionDigits: 2,\n                    })}{\" \"}\n                    EUR\n                  </div>\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        colors={[\"#543193\"]}\n        axisLeft={{ enable: false, tickSize: 0 }}\n        axisBottom={false}\n        enableGridX={false}\n        enableGridY={false}\n        enablePoints={false}\n        curve=\"natural\"\n        useMesh={false}\n        enableSlices=\"x\"\n      />\n    </Segment>\n  );\n}\n\nexport default PropertyPriceLine;\n","import React, { useContext, useState } from \"react\";\nimport { gql } from \"@apollo/client\";\nimport { Dimmer, Header, Loader, Segment } from \"semantic-ui-react\";\nimport { ResponsiveBar } from \"@nivo/bar\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport styles from \"./PropertyTypeChart.module.css\";\n\nconst defaultColor = \"#543193\";\nconst selectedColor = \"#c0ace3\";\nconst defaultColors = [defaultColor, defaultColor, defaultColor];\n\nconst GET_MEDIAN_PRICE = gql`\n  query($type: String!, $date: String!, $region: [String!]!) {\n    median_price: properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price {\n          median\n        }\n      }\n    }\n\n    apartment_count: properties(\n      filter: {\n        category: { eq: \"APARTMENT\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    house_count: properties(\n      filter: {\n        category: { eq: \"HOUSE\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    land_count: properties(\n      filter: {\n        category: { eq: \"LAND\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n  }\n`;\n\nfunction normalizeChartData(data) {\n  return [\n    {\n      category: \"Land\",\n      value: data ? data.land_count.summary.count : 0,\n    },\n    {\n      category: \"House\",\n      value: data ? data.house_count.summary.count : 0,\n    },\n    {\n      category: \"Apartment\",\n      value: data ? data.apartment_count.summary.count : 0,\n    },\n  ];\n}\n\nfunction PropertyTypeChart({ type, startDate }) {\n  const map = useContext(MapContext);\n  const { loading, data } = useDebouncedQuery(\n    GET_MEDIAN_PRICE,\n    {\n      variables: {\n        type,\n        date: startDate,\n        region: [map.region],\n      },\n    },\n    1000\n  );\n  const [colors, setColors] = useState(defaultColors);\n\n  function onClick({ index }) {\n    setColors((state) => {\n      if (state[index] === selectedColor) {\n        return defaultColors;\n      }\n\n      const newColors = [...defaultColors];\n      newColors[index] = selectedColor;\n      return newColors;\n    });\n  }\n\n  return (\n    <div>\n      <Header as=\"h4\" className={styles.title}>\n        Property type distribution\n      </Header>\n      <Segment basic className={styles.container}>\n        <Dimmer inverted active={loading}>\n          <Loader />\n        </Dimmer>\n\n        <ResponsiveBar\n          data={normalizeChartData(data)}\n          layout=\"horizontal\"\n          enableGridY={false}\n          enableLabel={false}\n          axisLeft={{ tickSize: 0 }}\n          axisBottom={false}\n          keys={[\"value\"]}\n          indexBy=\"category\"\n          margin={{ top: 0, right: 0, bottom: 0, left: 60 }}\n          animate={true}\n          colors={colors}\n          padding={0.4}\n          onClick={onClick}\n        />\n      </Segment>\n    </div>\n  );\n}\n\nexport default PropertyTypeChart;\n","import React, { useContext, useState } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { gql } from \"@apollo/client\";\nimport { Grid, Header } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport AreaOverview from \"./components/AreaOverview\";\nimport PropertyPriceLine from \"./components/PropertyPriceLine\";\nimport PropertyTypeChart from \"./components/PropertyTypeChart\";\n\nimport styles from \"./MapOverlay.module.css\";\n\nconst GET_MEDIAN_PRICE = gql`\n  query($type: String!, $date: String!, $region: [String!]!) {\n    properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price {\n          median\n        }\n      }\n    }\n  }\n`;\n\nfunction PriceLabel({ price }) {\n  if (!price) {\n    return \"Unknown\";\n  }\n\n  return parseInt(price, 10).toLocaleString(\"en\");\n}\n\nfunction MapOverlay() {\n  const map = useContext(MapContext);\n  const [startDate] = useState(\n    moment().subtract(30, \"days\").format(\"YYYY-MM-DD\")\n  );\n  const [type] = useState(\"sell\"); // @todo: dynamic\n  const { loading, error, data } = useDebouncedQuery(\n    GET_MEDIAN_PRICE,\n    {\n      variables: {\n        type: type,\n        date: startDate,\n        region: [map.region],\n      },\n    },\n    1000\n  );\n\n  const isLoading = loading || !data;\n\n  if (error) {\n    return (\n      <div className={styles.container}>\n        <Header as=\"h4\">\n          An unexpected error occured when attempting to fetch the data. Try\n          again later.\n        </Header>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container} id=\"map-overlay\">\n      <Grid>\n        <Grid.Column computer={8}>\n          <AreaOverview>\n            {isLoading ? (\n              <Skeleton />\n            ) : (\n              <PriceLabel price={data.properties.summary.price.median} />\n            )}\n          </AreaOverview>\n\n          <PropertyPriceLine type={type} />\n        </Grid.Column>\n        <Grid.Column computer={8}>\n          <PropertyTypeChart type={type} startDate={startDate} />\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n}\n\nexport default MapOverlay;\n","import MapOverlay from \"./MapOverlay\";\n\nexport default MapOverlay;\n","import React, { useState } from \"react\";\n\nimport Map from \"components/Map\";\nimport MapOverlay from \"components/MapOverlay\";\nimport MapContext from \"context/MapContext\";\n\nimport styles from \"./SplitPaneRight.module.css\";\n\nfunction convertBoundsToRegionString(bounds) {\n  const parts = [\n    [bounds.ne.lat, bounds.ne.lng].join(\" \"),\n    [bounds.nw.lat, bounds.nw.lng].join(\" \"),\n    [bounds.se.lat, bounds.se.lng].join(\" \"),\n    [bounds.sw.lat, bounds.sw.lng].join(\" \"),\n    [bounds.ne.lat, bounds.ne.lng].join(\" \"),\n  ];\n  return parts.join(\", \");\n}\n\nfunction SplitPaneRight() {\n  const [mapState, setMapState] = useState({\n    setBounds,\n    bounds: {\n      ne: {},\n      nw: {},\n      se: {},\n      sw: {},\n    },\n    region: \"\",\n  });\n\n  function setBounds(bounds) {\n    setMapState((state) => ({\n      ...state,\n      bounds,\n      region: convertBoundsToRegionString(bounds),\n    }));\n  }\n\n  return (\n    <div className={styles.container}>\n      <MapContext.Provider value={mapState}>\n        <Map />\n        <MapOverlay />\n      </MapContext.Provider>\n    </div>\n  );\n}\n\nexport default SplitPaneRight;\n","import SplitPaneRight from \"./SplitPaneRight\";\n\nexport default SplitPaneRight;\n","import React from \"react\";\nimport { Container, Grid } from \"semantic-ui-react\";\n\nimport SplitPaneLeft from \"containers/SplitPaneLeft\";\nimport SplitPaneRight from \"containers/SplitPaneRight\";\n\nimport styles from \"./App.module.css\";\n\nfunction App(props) {\n  return (\n    <Container fluid className={styles.container}>\n      <Grid className={styles.grid}>\n        <Grid.Column computer={9} className={styles.leftPanel}>\n          <SplitPaneLeft />\n        </Grid.Column>\n        <Grid.Column computer={7} className={styles.rightPanel}>\n          <SplitPaneRight />\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import Bugsnag from \"@bugsnag/js\";\nimport BugsnagPluginReact from \"@bugsnag/plugin-react\";\n\nBugsnag.start({\n  releaseStage: process.env.NODE_ENV,\n  enabledReleaseStages: [\"production\"],\n  apiKey: process.env.REACT_APP_BUGSNAG_KEY,\n  plugins: [new BugsnagPluginReact()],\n  collectUserIp: false,\n});\n\nexport default Bugsnag;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport client from \"./apollo-client\";\nimport App from \"./App.jsx\";\nimport Bugsnag from \"./bugsnag\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\n\nconst ErrorBoundary = Bugsnag.getPlugin(\"react\").createErrorBoundary(React);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <RecoilRoot>\n        <ApolloProvider client={client}>\n          <App />\n        </ApolloProvider>\n      </RecoilRoot>\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}