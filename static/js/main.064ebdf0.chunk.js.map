{"version":3,"sources":["App.module.css","containers/SplitPaneLeft/SplitPaneLeft.module.css","components/MapOverlay/components/AreaOverview.module.css","components/Navigation/Navigation.module.css","components/PropertyPriceChart/PropertyPriceChart.module.css","components/MapOverlay/components/PropertyPriceLine.module.css","components/MapOverlay/components/PropertyTypeChart.module.css","components/MapOverlay/MapOverlay.module.css","components/FilterToolbar/FilterToolbar.module.css","containers/SplitPaneRight/SplitPaneRight.module.css","containers/CurrentMonthOverview/CurrentMonthOverview.module.css","apollo-client.js","context/FilterContext.js","components/FilterToolbar/FilterToolbar.jsx","components/FilterToolbar/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/PropertyPriceChart/PropertyPriceChart.jsx","components/PropertyPriceChart/index.js","containers/CurrentMonthOverview/CurrentMonthOverview.jsx","containers/CurrentMonthOverview/index.js","containers/SplitPaneLeft/SplitPaneLeft.jsx","containers/SplitPaneLeft/index.js","context/MapContext.js","components/Map/Map.jsx","components/Map/index.js","hooks/use-debounced-query.js","components/MapOverlay/components/AreaOverview.jsx","components/MapOverlay/components/PropertyPriceLine.jsx","components/MapOverlay/components/PropertyTypeChart.jsx","components/MapOverlay/MapOverlay.jsx","components/MapOverlay/index.js","containers/SplitPaneRight/SplitPaneRight.jsx","containers/SplitPaneRight/index.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","FilterContext","React","createContext","FilterToolbar","context","useContext","className","styles","container","Menu","secondary","Item","fitted","Dropdown","placeholder","search","selection","defaultValue","location","default","options","onChange","event","data","setSelected","value","fluid","category","type","Navigation","Header","src","alt","height","position","Popup","content","inverted","trigger","href","target","rel","notificationLink","Icon","name","shake","Button","primary","animated","onClick","window","Content","visible","hidden","moment","extendMoment","Moment","range","utc","startOf","subtract","Date","dates","Array","from","by","excludeEnd","transformResponse","map","date","index","x","format","y","summary","price","median","defaultData","PropertyPriceChart","useQuery","gql","id","toISOString","clone","add","variables","selected","region","selectedRegion","loading","custom","useMemo","Segment","basic","Dimmer","active","Loader","margin","top","right","bottom","left","xScale","precision","xFormat","yScale","stacked","sliceTooltip","slice","tooltip","points","point","key","serieId","Number","yFormatted","toLocaleString","minimumFractionDigits","axisBottom","tickValues","tickRotation","enablePoints","curve","useMesh","enableSlices","GET_RENTAL_YIELD_DATA","GET_MEDIAN_PRICE","currentMonth","MedianPrice","current_month","momChange","last_month","yoyChange","last_year","statisticAddon","isFinite","textGreen","textRed","toFixed","parseInt","PropertyCount","count","RentalYieldValue","current_month_start","rent","sell","Statistic","Value","CurrentMonthOverview","last_month_start","last_month_end","last_year_start","last_year_end","as","Group","size","Label","locationOptions","rigaGeojson","features","row","properties","apkaime","text","categoryOptions","typeOptions","coordinatesToRegion","coordinates","parts","push","join","SplitPaneLeft","useState","find","geometry","setFilterState","state","filterState","Provider","highlightedText","MapContext","Map","props","bootstrapURLKeys","process","defaultCenter","lat","lng","defaultZoom","disableDefaultUI","bounds","mapHeight","percentage","document","getElementById","offsetTop","newBounds","nw","ne","sw","se","setBounds","useDebouncedQuery","query","nextConfig","time","nextConfigStr","JSON","stringify","debouncedIsLoading","setDebouncedLoading","undefined","previousData","setPreviousData","useDebounce","equalityFn","prev","next","config","useLazyQuery","performLazyQuery","useDebouncedCallback","performDebouncedQuery","useEffect","AreaOverview","children","year","currency","amount","label","PropertyPriceLine","endOf","colors","axisLeft","enable","tickSize","enableGridX","enableGridY","defaultColors","normalizeChartData","land_count","house_count","apartment_count","PropertyTypeChart","startDate","setColors","title","layout","enableLabel","keys","indexBy","animate","padding","newColors","PriceLabel","MapOverlay","error","isLoading","Grid","Column","computer","convertBoundsToRegionString","SplitPaneRight","setMapState","mapState","App","Container","grid","leftPanel","rightPanel","Boolean","hostname","match","ReactDOM","render","StrictMode","ApolloProvider","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.064ebdf0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"grid\":\"App_grid__3DnSg\",\"leftPanel\":\"App_leftPanel__3Hl9k\",\"rightPanel\":\"App_rightPanel__kN-EW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"SplitPaneLeft_content__4SUVj\",\"highlightedText\":\"SplitPaneLeft_highlightedText__2q005\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currency\":\"AreaOverview_currency__1aglq\",\"label\":\"AreaOverview_label__1Cauv\",\"amount\":\"AreaOverview_amount__KkYcy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shake\":\"Navigation_shake__1loJY\",\"bell-shake\":\"Navigation_bell-shake__28FvC\",\"notificationLink\":\"Navigation_notificationLink__dwBb-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceChart_container__b6m2Q\",\"tooltip\":\"PropertyPriceChart_tooltip__iGhsd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceLine_container__3NyhK\",\"tooltip\":\"PropertyPriceLine_tooltip__1tDKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyTypeChart_container__3smv6\",\"title\":\"PropertyTypeChart_title__1REaR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MapOverlay_container__16kzn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterToolbar_container__3xqZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SplitPaneRight_container__x3kzx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticAddon\":\"CurrentMonthOverview_statisticAddon__4ZK_J\",\"textGreen\":\"CurrentMonthOverview_textGreen__AjR7U\",\"textRed\":\"CurrentMonthOverview_textRed__2aAzI\"};","import { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"https://api.brokalys.com\",\n  }),\n});\n\nexport default client;\n","import React from \"react\";\n\nconst FilterContext = React.createContext();\n\nexport default FilterContext;\n","import React, { useContext } from \"react\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\n\nimport FilterContext from \"context/FilterContext\";\nimport styles from \"./FilterToolbar.module.css\";\n\nfunction FilterToolbar() {\n  const context = useContext(FilterContext);\n\n  function onLocationChange(event, data) {\n    context.location.setSelected(data.value);\n  }\n\n  function onCategoryChange(event, data) {\n    context.category.setSelected(data.value);\n  }\n\n  function onTypeChange(event, data) {\n    context.type.setSelected(data.value);\n  }\n\n  return (\n    <div className={styles.container}>\n      <Menu secondary>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select location\"\n            search\n            selection\n            defaultValue={context.location.default}\n            options={context.location.options}\n            onChange={onLocationChange}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select category\"\n            fluid\n            selection\n            defaultValue={context.category.default}\n            options={context.category.options}\n            onChange={onCategoryChange}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select type\"\n            fluid\n            selection\n            defaultValue={context.type.default}\n            options={context.type.options}\n            onChange={onTypeChange}\n          />\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n}\n\nexport default FilterToolbar;\n","import FilterToolbar from \"./FilterToolbar\";\n\nexport default FilterToolbar;\n","import React from \"react\";\nimport { Button, Icon, Menu, Popup } from \"semantic-ui-react\";\n\nimport styles from \"./Navigation.module.css\";\n\nfunction Navigation() {\n  function onFeedbackClick() {\n    window.location.href = \"mailto:matiss@brokalys.com?subject=Feedback\";\n  }\n\n  return (\n    <Menu secondary>\n      <Menu.Header>\n        <img src=\"https://brokalys.com/favicon.png\" alt=\"logo\" height=\"40px\" />\n      </Menu.Header>\n\n      <Menu.Item position=\"right\">\n        <Popup\n          content=\"Sign up for instant notifications about classifieds matching your parameters\"\n          inverted\n          position=\"bottom right\"\n          trigger={\n            <a\n              href=\"https://pinger.brokalys.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={styles.notificationLink}\n            >\n              <Icon name=\"bell outline\" className={styles.shake} />\n            </a>\n          }\n        />\n      </Menu.Item>\n\n      {/*<Menu.Item fitted>\n        <Button basic animated=\"vertical\">\n          <Button.Content visible>Compare</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"crosshairs\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>*/}\n\n      <Menu.Item fitted>\n        <Button primary animated=\"vertical\" onClick={onFeedbackClick}>\n          <Button.Content visible>Give feedback</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"mail\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Navigation;\n","import Navigation from \"./Navigation\";\n\nexport default Navigation;\n","import React, { useContext, useMemo } from \"react\";\nimport { Dimmer, Loader, Segment } from \"semantic-ui-react\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { ResponsiveLine } from \"@nivo/line\";\n\nimport FilterContext from \"context/FilterContext\";\nimport defaultData from \"./default-data.json\";\nimport styles from \"./PropertyPriceChart.module.css\";\n\nconst moment = extendMoment(Moment);\nconst range = moment().range(\n  moment().utc().startOf(\"day\").subtract(30, \"days\"),\n  new Date()\n);\nconst dates = Array.from(range.by(\"day\", { excludeEnd: true }));\n\nconst GET_MEDIAN_PRICE = (dates) => gql`\n  query(\n    $type: String!\n    $category: String!\n    $region: [String!]!\n  ) {\n    ${dates.map(\n      (date, id) => `\n      row_${id}: properties(\n        filter: {\n          type: { eq: $type }\n          category: { eq: $category }\n          published_at: {\n            gte: \"${date.toISOString()}\"\n            lt: \"${date.clone().add(1, \"day\").toISOString()}\"\n          }\n          region: { in: $region }\n        }\n      ) {\n        summary {\n          price {\n            median\n          }\n        }\n      }\n    `\n    )}\n  }\n`;\n\nfunction transformResponse(data) {\n  if (!data) {\n    return defaultData;\n  }\n\n  return dates.map((date, index) => {\n    if (!data) {\n      return {};\n    }\n\n    return {\n      x: date.format(\"YYYY-MM-DD\"),\n      y: data[`row_${index}`].summary.price.median,\n    };\n  });\n}\n\nfunction PropertyPriceChart() {\n  const context = useContext(FilterContext);\n  const { loading, data: custom } = useQuery(GET_MEDIAN_PRICE(dates), {\n    variables: {\n      type: context.type.selected,\n      category: context.category.selected,\n      region: [context.location.selectedRegion],\n    },\n  });\n\n  const data = useMemo(\n    () => [\n      {\n        id: \"Median Price\",\n        data: transformResponse(custom),\n      },\n    ],\n    [custom]\n  );\n\n  return (\n    <Segment basic className={styles.container}>\n      <Dimmer inverted active={loading}>\n        <Loader />\n      </Dimmer>\n\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 10, right: 10, bottom: 100, left: 50 }}\n        xScale={{\n          type: \"time\",\n          format: \"%Y-%m-%d\",\n          precision: \"day\",\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          type: \"linear\",\n          stacked: false,\n        }}\n        sliceTooltip={({ slice }) => {\n          return (\n            <div className={styles.tooltip}>\n              {slice.points.map((point) => (\n                <div key={point.id}>\n                  <div>\n                    <strong>{moment(point.data.x).format(\"YYYY-MM-DD\")}</strong>\n                  </div>\n                  <div>\n                    <strong>{point.serieId}:</strong>{\" \"}\n                    {Number(point.data.yFormatted).toLocaleString(\"en\", {\n                      minimumFractionDigits: 2,\n                    })}{\" \"}\n                    EUR\n                  </div>\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        axisBottom={{\n          format: \"%Y-%m\",\n          tickValues: \"every 2 days\",\n          tickRotation: -90,\n        }}\n        enablePoints={false}\n        curve=\"natural\"\n        useMesh={true}\n        enableSlices=\"x\"\n      />\n    </Segment>\n  );\n}\n\nexport default PropertyPriceChart;\n","import PropertyPriceChart from \"./PropertyPriceChart\";\n\nexport default PropertyPriceChart;\n","import React, { useContext } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { Header, Statistic } from \"semantic-ui-react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport moment from \"moment\";\n\nimport FilterContext from \"context/FilterContext\";\nimport styles from \"./CurrentMonthOverview.module.css\";\n\nconst GET_RENTAL_YIELD_DATA = gql`\n  query(\n    $category: String!\n    $current_month_start: String!\n    $region: [String!]!\n  ) {\n    sell: properties(\n      filter: {\n        category: { eq: $category }\n        type: { eq: \"sell\" }\n        published_at: { gte: $current_month_start }\n        region: { in: $region }\n      }\n    ) {\n      ...MedianPrice\n    }\n\n    rent: properties(\n      filter: {\n        category: { eq: $category }\n        type: { eq: \"rent\" }\n        published_at: { gte: $current_month_start }\n        region: { in: $region }\n      }\n    ) {\n      ...MedianPrice\n    }\n  }\n\n  fragment MedianPrice on Properties {\n    summary {\n      price {\n        median\n      }\n    }\n  }\n`;\n\nconst GET_MEDIAN_PRICE = gql`\n  query(\n    $type: String!\n    $category: String!\n    $current_month_start: String!\n    $last_month_start: String!\n    $last_month_end: String!\n    $last_year_start: String!\n    $last_year_end: String!\n    $region: [String!]!\n  ) {\n    current_month: properties(\n      filter: {\n        category: { eq: $category }\n        type: { eq: $type }\n        published_at: { gte: $current_month_start }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n        price {\n          median\n        }\n      }\n    }\n\n    last_month: properties(\n      filter: {\n        category: { eq: $category }\n        type: { eq: $type }\n        published_at: { gte: $last_month_start, lt: $last_month_end }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n        price {\n          median\n        }\n      }\n    }\n\n    last_year: properties(\n      filter: {\n        category: { eq: $category }\n        type: { eq: $type }\n        published_at: { gte: $last_year_start, lt: $last_year_end }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n        price {\n          median\n        }\n      }\n    }\n  }\n`;\n\nconst currentMonth = moment().utc().clone().startOf(\"month\");\n\nfunction MedianPrice({ loading, data }) {\n  if (loading) {\n    return <Skeleton height={42} />;\n  }\n\n  const { median } = data.current_month.summary.price;\n  const momChange = (1 - median / data.last_month.summary.price.median) * 100;\n  const yoyChange = (1 - median / data.last_year.summary.price.median) * 100;\n\n  return (\n    <div>\n      <div className={styles.statisticAddon}>\n        {isFinite(momChange) && (\n          <div>\n            <span className={momChange < 0 ? styles.textGreen : styles.textRed}>\n              {momChange < 0 ? \"+\" : \"\"}\n              {-momChange.toFixed(2)}%\n            </span>{\" \"}\n            MoM\n          </div>\n        )}\n        {isFinite(yoyChange) && (\n          <div>\n            <span className={yoyChange < 0 ? styles.textGreen : styles.textRed}>\n              {yoyChange < 0 ? \"+\" : \"\"}\n              {-yoyChange.toFixed(2)}%\n            </span>{\" \"}\n            YoY\n          </div>\n        )}\n      </div>\n\n      {parseInt(median, 10).toLocaleString(\"en\")}\n    </div>\n  );\n}\n\nfunction PropertyCount({ loading, data }) {\n  if (loading) {\n    return <Skeleton height={42} />;\n  }\n\n  const { count } = data.current_month.summary;\n  const momChange = (1 - count / data.last_month.summary.count) * 100;\n  const yoyChange = (1 - count / data.last_year.summary.count) * 100;\n\n  return (\n    <div>\n      <div className={styles.statisticAddon}>\n        {isFinite(momChange) && (\n          <div>\n            <span className={momChange < 0 ? styles.textGreen : styles.textRed}>\n              {momChange < 0 ? \"+\" : \"\"}\n              {-momChange.toFixed(2)}%\n            </span>{\" \"}\n            MoM\n          </div>\n        )}\n        {isFinite(yoyChange) && (\n          <div>\n            <span className={yoyChange < 0 ? styles.textGreen : styles.textRed}>\n              {yoyChange < 0 ? \"+\" : \"\"}\n              {-yoyChange.toFixed(2)}%\n            </span>{\" \"}\n            YoY\n          </div>\n        )}\n      </div>\n\n      {count}\n    </div>\n  );\n}\n\nfunction RentalYieldValue({ region, category }) {\n  const { loading, data } = useQuery(GET_RENTAL_YIELD_DATA, {\n    variables: {\n      category,\n      current_month_start: currentMonth.toISOString(),\n      region: [region],\n    },\n  });\n\n  if (loading) {\n    return <Skeleton height={40} />;\n  }\n\n  const value =\n    (data.rent.summary.price.median / data.sell.summary.price.median) * 100;\n  return <Statistic.Value>{value.toFixed(2)}%</Statistic.Value>;\n}\n\nfunction CurrentMonthOverview() {\n  const context = useContext(FilterContext);\n\n  const { loading, data } = useQuery(GET_MEDIAN_PRICE, {\n    variables: {\n      type: context.type.selected,\n      category: context.category.selected,\n      current_month_start: currentMonth.toISOString(),\n      last_month_start: currentMonth.clone().subtract(1, \"month\").toISOString(),\n      last_month_end: currentMonth\n        .clone()\n        .subtract(1, \"month\")\n        .add(1, \"month\")\n        .toISOString(),\n      last_year_start: currentMonth.clone().subtract(1, \"year\").toISOString(),\n      last_year_end: currentMonth\n        .clone()\n        .subtract(1, \"year\")\n        .add(1, \"month\")\n        .toISOString(),\n      region: [context.location.selectedRegion],\n    },\n  });\n\n  return (\n    <div>\n      <Header as=\"h3\">Current Month</Header>\n\n      <Statistic.Group size=\"small\">\n        <Statistic>\n          <Statistic.Value>\n            <MedianPrice loading={loading} data={data} />\n          </Statistic.Value>\n          <Statistic.Label>\n            Median Price (EUR/m<sup>2</sup>)\n          </Statistic.Label>\n        </Statistic>\n\n        <Statistic>\n          <Statistic.Value>\n            <PropertyCount loading={loading} data={data} />\n          </Statistic.Value>\n          <Statistic.Label>Classified amount</Statistic.Label>\n        </Statistic>\n\n        <Statistic>\n          <RentalYieldValue\n            region={context.location.selectedRegion}\n            category={context.category.selected}\n          />\n          <Statistic.Label>Rental Yield</Statistic.Label>\n        </Statistic>\n      </Statistic.Group>\n    </div>\n  );\n}\n\nexport default CurrentMonthOverview;\n","import CurrentMonthOverview from \"./CurrentMonthOverview\";\n\nexport default CurrentMonthOverview;\n","import React, { useState } from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\nimport FilterToolbar from \"components/FilterToolbar\";\nimport Navigation from \"components/Navigation\";\nimport PropertyPriceChart from \"components/PropertyPriceChart\";\nimport CurrentMonthOverview from \"containers/CurrentMonthOverview\";\nimport FilterContext from \"context/FilterContext\";\nimport rigaGeojson from \"data/riga-geojson.json\";\n\nimport styles from \"./SplitPaneLeft.module.css\";\n\nconst locationOptions = rigaGeojson.features.map((row) => ({\n  value: row.properties.apkaime,\n  text: row.properties.apkaime,\n}));\n\nconst categoryOptions = [\n  { value: \"Apartment\", text: \"Apartment\" },\n  { value: \"House\", text: \"House\" },\n  { value: \"Land\", text: \"Land\" },\n];\nconst typeOptions = [\n  { value: \"Sell\", text: \"Sell\" },\n  { value: \"Rent\", text: \"Rent\" },\n];\n\nfunction coordinatesToRegion(coordinates) {\n  const parts = coordinates.map((row) => `${row[1]} ${row[0]}`);\n  parts.push(parts[0]);\n  return parts.join(\", \");\n}\n\nfunction SplitPaneLeft() {\n  const [filterState, setFilterState] = useState({\n    location: {\n      options: locationOptions,\n      default: \"Centrs\",\n      selected: \"Centrs\",\n      selectedRegion: coordinatesToRegion(\n        rigaGeojson.features.find(\n          ({ properties }) => properties.apkaime === \"Centrs\"\n        ).geometry.coordinates[0]\n      ),\n      setSelected(selected) {\n        setFilterState((state) => ({\n          ...state,\n          location: {\n            ...state.location,\n            selected,\n            selectedRegion: coordinatesToRegion(\n              rigaGeojson.features.find(\n                ({ properties }) => properties.apkaime === selected\n              ).geometry.coordinates[0]\n            ),\n          },\n        }));\n      },\n    },\n    category: {\n      options: categoryOptions,\n      default: \"Apartment\",\n      selected: \"Apartment\",\n      setSelected(selected) {\n        setFilterState((state) => ({\n          ...state,\n          category: {\n            ...state.category,\n            selected,\n          },\n        }));\n      },\n    },\n    type: {\n      options: typeOptions,\n      default: \"Sell\",\n      selected: \"Sell\",\n      setSelected(selected) {\n        setFilterState((state) => ({\n          ...state,\n          type: {\n            ...state.type,\n            selected,\n          },\n        }));\n      },\n    },\n  });\n\n  return (\n    <div className={styles.container}>\n      <Navigation />\n\n      <FilterContext.Provider value={filterState} className={styles.content}>\n        <Header as=\"h2\">\n          Average Prices in{\" \"}\n          <span className={styles.highlightedText}>\n            {filterState.location.selected}\n          </span>\n        </Header>\n\n        <FilterToolbar />\n        <PropertyPriceChart />\n        <CurrentMonthOverview />\n      </FilterContext.Provider>\n    </div>\n  );\n}\n\nexport default SplitPaneLeft;\n","import SplitPaneLeft from \"./SplitPaneLeft\";\n\nexport default SplitPaneLeft;\n","import React from \"react\";\n\nconst MapContext = React.createContext();\n\nexport default MapContext;\n","import React, { useContext } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\n\nimport MapContext from \"context/MapContext\";\n\nfunction Map(props) {\n  const context = useContext(MapContext);\n\n  /**\n   * Ignore the overlay when doing data lookups by region.\n   */\n  function onChange(map) {\n    const { bounds } = map;\n\n    const mapHeight = map.size.height;\n    const overlayHeight = document.getElementById(\"map-overlay\").offsetTop;\n    const percentage = 1 - overlayHeight / mapHeight;\n\n    const newBounds = {\n      nw: bounds.nw,\n      ne: bounds.ne,\n\n      sw: {\n        lat: bounds.sw.lat + (bounds.nw.lat - bounds.sw.lat) * percentage,\n        lng: bounds.sw.lng,\n      },\n      se: {\n        lat: bounds.se.lat + (bounds.nw.lat - bounds.se.lat) * percentage,\n        lng: bounds.se.lng,\n      },\n    };\n\n    context.setBounds(newBounds);\n  }\n\n  return (\n    <GoogleMapReact\n      bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_KEY }}\n      defaultCenter={{\n        lat: 56.879635,\n        lng: 24.603189,\n      }}\n      defaultZoom={7}\n      options={{\n        disableDefaultUI: true,\n      }}\n      onChange={onChange}\n    />\n  );\n}\n\nexport default Map;\n","import Map from \"./Map\";\n\nexport default Map;\n","import { useEffect, useState } from \"react\";\nimport { useDebounce, useDebouncedCallback } from \"use-debounce\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nexport default function useDebouncedQuery(query, nextConfig, time = 1000) {\n  const nextConfigStr = JSON.stringify(nextConfig);\n  const [debouncedIsLoading, setDebouncedLoading] = useState(true);\n  const [previousData, setPreviousData] = useState(undefined);\n  const [config] = useDebounce(nextConfig, time, {\n    equalityFn: (prev, next) => JSON.stringify(prev) === JSON.stringify(next),\n  });\n\n  const [performLazyQuery, { loading, data }] = useLazyQuery(query, config);\n  const [performDebouncedQuery] = useDebouncedCallback(() => {\n    performLazyQuery();\n  }, time);\n\n  useEffect(() => {\n    setDebouncedLoading(true);\n    performDebouncedQuery();\n  }, [nextConfigStr, performDebouncedQuery]);\n\n  useEffect(() => {\n    if (loading === false && data) {\n      setDebouncedLoading(false);\n      setPreviousData(data);\n    }\n  }, [loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    loading: loading || debouncedIsLoading,\n    data: data || previousData,\n  };\n}\n","import React from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\nimport styles from \"./AreaOverview.module.css\";\n\nfunction AreaOverview({ children, year }) {\n  return (\n    <div>\n      <Header as=\"h4\">Selected Area</Header>\n      <div>\n        <div className={styles.currency}>€</div>\n        <div className={styles.amount}>{children}</div>\n        <div className={styles.label}>Median Price last 30 days</div>\n      </div>\n    </div>\n  );\n}\n\nexport default AreaOverview;\n","import React, { useContext, useMemo } from \"react\";\nimport { Dimmer, Loader, Segment } from \"semantic-ui-react\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { gql } from \"@apollo/client\";\nimport { ResponsiveLine } from \"@nivo/line\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport styles from \"./PropertyPriceLine.module.css\";\n\nconst moment = extendMoment(Moment);\nconst range = moment().range(\n  moment().utc().startOf(\"day\").subtract(30, \"days\"),\n  new Date()\n);\nconst dates = Array.from(range.by(\"day\", { excludeEnd: true }));\n\nconst GET_MEDIAN_PRICE = (dates) => gql`\n  query(\n    $type: String!\n    $region: [String!]!\n  ) {\n    ${dates.map(\n      (date, id) => `\n      row_${id}: properties(\n        filter: {\n          type: { eq: $type }\n          published_at: {\n            gte: \"${date.toISOString()}\"\n            lte: \"${date.clone().endOf(\"day\").toISOString()}\"\n          }\n          region: { in: $region }\n        }\n      ) {\n        summary {\n          price {\n            median\n          }\n        }\n      }\n    `\n    )}\n  }\n`;\n\nfunction transformResponse(data) {\n  if (!data) {\n    return [];\n  }\n\n  return dates.map((date, index) => {\n    if (!data) {\n      return {};\n    }\n\n    return {\n      x: date.format(\"YYYY-MM-DD\"),\n      y: data[`row_${index}`].summary.price.median,\n    };\n  });\n}\n\nfunction PropertyPriceLine({ type }) {\n  const map = useContext(MapContext);\n  const { loading, data: custom } = useDebouncedQuery(\n    GET_MEDIAN_PRICE(dates),\n    {\n      variables: {\n        type,\n        region: [map.region],\n      },\n    },\n    2000\n  );\n\n  const data = useMemo(\n    () => [\n      {\n        id: \"Median price\",\n        data: transformResponse(custom),\n      },\n    ],\n    [custom]\n  );\n\n  return (\n    <Segment basic className={styles.container}>\n      <Dimmer inverted active={loading}>\n        <Loader />\n      </Dimmer>\n\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 5, right: 5, bottom: 5, left: 5 }}\n        xScale={{\n          type: \"time\",\n          format: \"%Y-%m-%d\",\n          precision: \"day\",\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          type: \"linear\",\n          stacked: false,\n        }}\n        sliceTooltip={({ slice }) => {\n          return (\n            <div className={styles.tooltip}>\n              {slice.points.map((point) => (\n                <div key={point.id}>\n                  <div>\n                    <strong>{moment(point.data.x).format(\"YYYY-MM-DD\")}</strong>\n                  </div>\n                  <div>\n                    <strong>{point.serieId}:</strong>{\" \"}\n                    {Number(point.data.yFormatted).toLocaleString(\"en\", {\n                      minimumFractionDigits: 2,\n                    })}{\" \"}\n                    EUR\n                  </div>\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        colors={[\"#543193\"]}\n        axisLeft={{ enable: false, tickSize: 0 }}\n        axisBottom={false}\n        enableGridX={false}\n        enableGridY={false}\n        enablePoints={false}\n        curve=\"natural\"\n        useMesh={false}\n        enableSlices=\"x\"\n      />\n    </Segment>\n  );\n}\n\nexport default PropertyPriceLine;\n","import React, { useContext, useState } from \"react\";\nimport { gql } from \"@apollo/client\";\nimport { Dimmer, Header, Loader, Segment } from \"semantic-ui-react\";\nimport { ResponsiveBar } from \"@nivo/bar\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport styles from \"./PropertyTypeChart.module.css\";\n\nconst defaultColor = \"#543193\";\nconst selectedColor = \"#c0ace3\";\nconst defaultColors = [defaultColor, defaultColor, defaultColor];\n\nconst GET_MEDIAN_PRICE = gql`\n  query($type: String!, $date: String!, $region: [String!]!) {\n    median_price: properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price {\n          median\n        }\n      }\n    }\n\n    apartment_count: properties(\n      filter: {\n        category: { eq: \"APARTMENT\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    house_count: properties(\n      filter: {\n        category: { eq: \"HOUSE\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    land_count: properties(\n      filter: {\n        category: { eq: \"LAND\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n  }\n`;\n\nfunction normalizeChartData(data) {\n  return [\n    {\n      category: \"Land\",\n      value: data ? data.land_count.summary.count : 0,\n    },\n    {\n      category: \"House\",\n      value: data ? data.house_count.summary.count : 0,\n    },\n    {\n      category: \"Apartment\",\n      value: data ? data.apartment_count.summary.count : 0,\n    },\n  ];\n}\n\nfunction PropertyTypeChart({ type, startDate }) {\n  const map = useContext(MapContext);\n  const { loading, data } = useDebouncedQuery(\n    GET_MEDIAN_PRICE,\n    {\n      variables: {\n        type,\n        date: startDate,\n        region: [map.region],\n      },\n    },\n    1000\n  );\n  const [colors, setColors] = useState(defaultColors);\n\n  function onClick({ index }) {\n    setColors((state) => {\n      if (state[index] === selectedColor) {\n        return defaultColors;\n      }\n\n      const newColors = [...defaultColors];\n      newColors[index] = selectedColor;\n      return newColors;\n    });\n  }\n\n  return (\n    <div>\n      <Header as=\"h4\" className={styles.title}>\n        Property type distribution\n      </Header>\n      <Segment basic className={styles.container}>\n        <Dimmer inverted active={loading}>\n          <Loader />\n        </Dimmer>\n\n        <ResponsiveBar\n          data={normalizeChartData(data)}\n          layout=\"horizontal\"\n          enableGridY={false}\n          enableLabel={false}\n          axisLeft={{ tickSize: 0 }}\n          axisBottom={false}\n          keys={[\"value\"]}\n          indexBy=\"category\"\n          margin={{ top: 0, right: 0, bottom: 0, left: 60 }}\n          animate={true}\n          colors={colors}\n          padding={0.4}\n          onClick={onClick}\n        />\n      </Segment>\n    </div>\n  );\n}\n\nexport default PropertyTypeChart;\n","import React, { useContext, useState } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { gql } from \"@apollo/client\";\nimport { Grid, Header } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nimport MapContext from \"context/MapContext\";\nimport useDebouncedQuery from \"hooks/use-debounced-query\";\nimport AreaOverview from \"./components/AreaOverview\";\nimport PropertyPriceLine from \"./components/PropertyPriceLine\";\nimport PropertyTypeChart from \"./components/PropertyTypeChart\";\n\nimport styles from \"./MapOverlay.module.css\";\n\nconst GET_MEDIAN_PRICE = gql`\n  query($type: String!, $date: String!, $region: [String!]!) {\n    properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price {\n          median\n        }\n      }\n    }\n  }\n`;\n\nfunction PriceLabel({ price }) {\n  if (!price) {\n    return \"Unknown\";\n  }\n\n  return parseInt(price, 10).toLocaleString(\"en\");\n}\n\nfunction MapOverlay() {\n  const map = useContext(MapContext);\n  const [startDate] = useState(\n    moment().subtract(30, \"days\").format(\"YYYY-MM-DD\")\n  );\n  const [type] = useState(\"SELL\"); // @todo: dynamic\n  const { loading, error, data } = useDebouncedQuery(\n    GET_MEDIAN_PRICE,\n    {\n      variables: {\n        type: type,\n        date: startDate,\n        region: [map.region],\n      },\n    },\n    1000\n  );\n\n  const isLoading = loading || !data;\n\n  if (error) {\n    return (\n      <div className={styles.container}>\n        <Header as=\"h4\">\n          An unexpected error occured when attempting to fetch the data. Try\n          again later.\n        </Header>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container} id=\"map-overlay\">\n      <Grid>\n        <Grid.Column computer={8}>\n          <AreaOverview>\n            {isLoading ? (\n              <Skeleton />\n            ) : (\n              <PriceLabel price={data.properties.summary.price.median} />\n            )}\n          </AreaOverview>\n\n          <PropertyPriceLine type={type} />\n        </Grid.Column>\n        <Grid.Column computer={8}>\n          <PropertyTypeChart type={type} startDate={startDate} />\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n}\n\nexport default MapOverlay;\n","import MapOverlay from \"./MapOverlay\";\n\nexport default MapOverlay;\n","import React, { useState } from \"react\";\n\nimport Map from \"components/Map\";\nimport MapOverlay from \"components/MapOverlay\";\nimport MapContext from \"context/MapContext\";\n\nimport styles from \"./SplitPaneRight.module.css\";\n\nfunction convertBoundsToRegionString(bounds) {\n  const parts = [\n    [bounds.ne.lat, bounds.ne.lng].join(\" \"),\n    [bounds.nw.lat, bounds.nw.lng].join(\" \"),\n    [bounds.se.lat, bounds.se.lng].join(\" \"),\n    [bounds.sw.lat, bounds.sw.lng].join(\" \"),\n    [bounds.ne.lat, bounds.ne.lng].join(\" \"),\n  ];\n  return parts.join(\", \");\n}\n\nfunction SplitPaneRight() {\n  const [mapState, setMapState] = useState({\n    setBounds,\n    bounds: {\n      ne: {},\n      nw: {},\n      se: {},\n      sw: {},\n    },\n    region: \"\",\n  });\n\n  function setBounds(bounds) {\n    setMapState((state) => ({\n      ...state,\n      bounds,\n      region: convertBoundsToRegionString(bounds),\n    }));\n  }\n\n  return (\n    <div className={styles.container}>\n      <MapContext.Provider value={mapState}>\n        <Map />\n        <MapOverlay />\n      </MapContext.Provider>\n    </div>\n  );\n}\n\nexport default SplitPaneRight;\n","import SplitPaneRight from \"./SplitPaneRight\";\n\nexport default SplitPaneRight;\n","import React from \"react\";\nimport { Container, Grid } from \"semantic-ui-react\";\n\nimport SplitPaneLeft from \"containers/SplitPaneLeft\";\nimport SplitPaneRight from \"containers/SplitPaneRight\";\n\nimport styles from \"./App.module.css\";\n\nfunction App(props) {\n  return (\n    <Container fluid className={styles.container}>\n      <Grid className={styles.grid}>\n        <Grid.Column computer={9} className={styles.leftPanel}>\n          <SplitPaneLeft />\n        </Grid.Column>\n        <Grid.Column computer={7} className={styles.rightPanel}>\n          <SplitPaneRight />\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport client from \"./apollo-client\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}