{"version":3,"sources":["components/Loading.js","App.js","registerServiceWorker.js","index.js"],"names":["Loading","props","error","react_default","a","createElement","pastDelay","Home","loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","Daily","Pulse","App","BrowserRouter","className","style","height","Route","exact","path","component","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","bugsnagClient","use","bugsnagReact","ErrorBoundary","getPlugin","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kUAceA,MAZf,SAAiBC,GACf,OAAIA,EAAMC,MACDC,EAAAC,EAAAC,cAAA,qBAGLJ,EAAMK,UACDH,EAAAC,EAAAC,cAAA,yBAGF,MCNHE,EAAOC,IAAS,CACpBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAAShB,IAELiB,EAAQT,IAAS,CACrBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAAShB,IAELkB,EAAQV,IAAS,CACrBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAAShB,IAmBImB,mLAbX,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,UAAUC,MAAO,CAACC,OAAQ,sBACvCpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjCJ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWV,IAChCd,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWT,aARxBU,IAAMC,WCRlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTvB,KAAK,SAAC2B,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAChD,GACN8C,QAAQ9C,MAAM,4CAA6CA,KCpEjE,IAAMiD,EAAgBnB,OAAOmB,cAE7B,GAAIA,EAAe,CACjBA,EAAcC,IAAIC,IAAczB,KAChC,IAAM0B,EAAgBH,EAAcI,UAAU,SAE9CC,IAASC,OACPtD,EAAAC,EAAAC,cAACiD,EAAD,KACEnD,EAAAC,EAAAC,cAACqD,EAAD,OAEFC,SAASC,eAAe,cAG1BJ,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,UDJpC,WACb,GAA6C,kBAAmBtB,UAAW,CAGzE,GADkB,IAAIuB,IAAIC,GAAwB9B,OAAOC,UAC3C8B,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMH,GAAN,sBAEPhC,GAiDV,SAAiCO,GAE/B6B,MAAM7B,GACHvB,KAAK,SAACqD,GAGiB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CjC,UAAUC,cAAciC,MAAM1D,KAAK,SAAC2B,GAClCA,EAAagC,aAAa3D,KAAK,WAC7BkB,OAAOC,SAASyC,aAKpBtC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEA0B,CAAwBtC,GAIxBC,UAAUC,cAAciC,MAAM1D,KAAK,WACjCkC,QAAQC,IACN,+GAMJb,EAAgBC,MCrBxBuC","file":"static/js/main.808740cc.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Loading(props) {\n  if (props.error) {\n    return <div>Error!</div>;\n  }\n\n  if (props.pastDelay) {\n    return <div>Loading...</div>;\n  }\n\n  return null;\n}\n\nexport default Loading;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport loadable from 'react-loadable';\nimport Loading from './components/Loading';\n\nconst Home = loadable({\n  loader: () => import('./pages/Home'),\n  loading: Loading,\n});\nconst Daily = loadable({\n  loader: () => import('./pages/Daily'),\n  loading: Loading,\n});\nconst Pulse = loadable({\n  loader: () => import('./pages/Pulse'),\n  loading: Loading,\n});\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Router>\n        <div className=\"wrapper\" style={{height: 'calc(100% - 56px)'}}>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/daily\" component={Daily} />\n          <Route path=\"/pulse\" component={Pulse} />\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport bugsnagReact from '@bugsnag/plugin-react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'nprogress/nprogress.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst bugsnagClient = window.bugsnagClient;\n\nif (bugsnagClient) {\n  bugsnagClient.use(bugsnagReact, React);\n  const ErrorBoundary = bugsnagClient.getPlugin('react');\n\n  ReactDOM.render(\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>,\n    document.getElementById('root'),\n  );\n} else {\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n\nregisterServiceWorker();\n"],"sourceRoot":""}