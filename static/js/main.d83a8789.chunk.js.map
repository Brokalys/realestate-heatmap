{"version":3,"sources":["components/Statistics/MeanPriceInFilterLocation/MeanPriceInFilterLocation.module.css","App.module.css","containers/SplitPaneLeft/SplitPaneLeft.module.css","components/MapOverlay/components/AreaOverview.module.css","components/Navigation/Navigation.module.css","components/PropertyPriceChart/PropertyPriceChart.module.css","components/MapOverlay/components/PropertyPriceLine.module.css","components/MapOverlay/components/PropertyTypeChart.module.css","components/FilterToolbar/FilterToolbar.module.css","components/MapOverlay/MapOverlay.module.css","containers/SplitPaneRight/SplitPaneRight.module.css","apollo-client.js","bugsnag.js","store/state.js","store/selectors.js","components/FilterToolbar/FilterToolbar.jsx","components/FilterToolbar/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/PropertyPriceChart/PropertyPriceChart.jsx","components/PropertyPriceChart/index.js","components/Statistics/MeanPriceInFilterLocation/MeanPriceInFilterLocation.jsx","components/Statistics/MeanPriceInFilterLocation/index.js","components/Statistics/RentalYieldInFilterLocation/RentalYieldInFilterLocation.jsx","components/Statistics/RentalYieldInFilterLocation/index.js","containers/SplitPaneLeft/SplitPaneLeft.jsx","containers/SplitPaneLeft/index.js","context/BuildingContext.jsx","context/MapContext.js","hooks/use-active-building.js","hooks/use-debounced-query.js","hooks/api/use-region-buildings.js","components/Map/components/BuildingPolygons.jsx","components/Map/Map.jsx","components/Map/index.js","components/MapOverlay/MapOverlayPerBuilding.jsx","hooks/use-region-params.js","hooks/api/use-mean-price.js","components/MapOverlay/components/AreaOverview.jsx","components/MapOverlay/components/PropertyPriceLine.jsx","components/MapOverlay/components/PropertyTypeChart.jsx","components/MapOverlay/MapOverlayPerRegion.jsx","components/MapOverlay/MapOverlay.jsx","components/MapOverlay/index.js","containers/SplitPaneRight/SplitPaneRight.jsx","containers/SplitPaneRight/index.js","App.jsx","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["module","exports","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","process","Bugsnag","start","releaseStage","enabledReleaseStages","apiKey","plugins","BugsnagPluginReact","collectUserIp","filterState","atom","key","default","category","type","location","priceType","getCategoryFilter","selector","get","set","newValue","getTypeFilter","getLocationFilter","getPriceTypeFilter","getPrices","selectorFamily","filters","loadData","a","axios","filterStr","data","encodeURIComponent","JSON","stringify","runs","Promise","resolve","loadingResults","setTimeout","reloadPromise","getPricesInFilteredLocation","location_classificator","getMeanPriceLastMonth","results","group","mean","length","price","change","mom","yoy","getRentalYield","all","sellData","rentData","locationOptions","riga","features","map","row","value","properties","id","text","name","categoryOptions","typeOptions","priceTypeOptions","FilterToolbar","useRecoilState","setLocation","setCategory","setType","setPriceType","className","styles","container","Menu","secondary","Item","fitted","Dropdown","placeholder","search","selected","regexp","RegExp","transliterate","replace","filter","test","selection","defaultValue","options","onChange","event","fluid","Navigation","Header","src","alt","height","position","Popup","content","inverted","trigger","href","target","rel","notificationLink","data-testid","Icon","shake","Button","primary","animated","onClick","window","Content","visible","hidden","PropertyPriceChart","useRecoilValue","useMemo","prices","pricePerSqm","x","start_datetime","substr","y","maxPrice","reduce","carry","max","Price","Number","toLocaleString","minimumFractionDigits","margin","top","right","bottom","left","xScale","format","precision","xFormat","yScale","stacked","sliceTooltip","slice","tooltip","points","point","moment","min","serieId","yFormatted","mode","median","axisBottom","tickValues","tickRotation","enablePoints","curve","useMesh","enableSlices","layers","AreaLayer","series","areaGenerator","innerHeight","area","d","y0","y1","curveMonotoneX","defs","background","color","lineWidth","spacing","rotation","fill","fillOpacity","stroke","strokeWidth","PropertyPriceChartContainer","Segment","basic","fallback","Message","negative","onError","notify","Suspense","Dimmer","active","Loader","Description","MeanPriceInFilterLocation","momChange","yoyChange","Statistic","Value","statisticAddon","isFinite","textGreen","textRed","toFixed","parseInt","Label","children","icon","MeanPriceInFilterLocationContainer","width","RentalYieldInFilterLocation","RentalYieldInFilterLocationContainer","SplitPaneLeft","locationName","find","as","highlightedText","Group","size","BuildingContext","React","createContext","BuildingContextProvider","props","useState","setActiveBuilding","building","setState","current","activeBuilding","undefined","buildingCount","setBuildingCount","setStateSlice","loading","error","setLoading","setError","state","sliceName","sliceValue","Provider","MapContext","useActiveBuilding","context","useContext","useDebouncedQuery","query","nextConfig","time","nextConfigStr","debouncedIsLoading","setDebouncedLoading","previousData","setPreviousData","useDebounce","equalityFn","prev","next","config","useLazyQuery","performLazyQuery","useDebouncedCallback","performDebouncedQuery","callback","useEffect","GET_BUILDINGS_AND_PROPERTIES","gql","BuildingPolygons","buildings","region","variables","useRegionBuildings","onBuildingClick","paths","bounds","split","lat","lng","parseFloat","strokeColor","fillColor","center","containerStyle","Map","setMap","useLoadScript","googleMapsApiKey","isLoaded","loadError","onBoundsChanged","mapHeight","getDiv","clientHeight","percentage","document","getElementById","offsetTop","newBounds","nw","getBounds","getSouthWest","getNorthEast","ne","sw","se","setBounds","setZoom","getZoom","zoomControlOptions","google","maps","ControlPosition","RIGHT_TOP","rotateControl","scaleControl","streetViewControl","panControl","fullscreenControl","mapContainerStyle","zoom","onLoad","renderMap","memo","RENT_TYPE_SUFFIX","yearly","monthly","weekly","daily","MapOverlayPerBuilding","info","Table","singleLine","selectable","compact","textAlign","Row","HeaderCell","Body","index","Cell","rent_type","price_per_sqm","Math","round","rooms","floor","published_at","MapOverlayPerBuildingContainer","useRegionParams","regionPolygon","locations","feature","polygonsOverlapping","geometry","coordinates","GET_MEAN_PRICE","AreaOverview","year","currency","amount","label","extendMoment","Moment","range","utc","startOf","subtract","Date","dates","Array","from","by","excludeEnd","transformResponse","date","summary","PropertyPriceLine","toISOString","clone","endOf","custom","colors","axisLeft","enable","tickSize","enableGridX","enableGridY","defaultColor","selectedColor","defaultColors","normalizeChartData","land_count","count","house_count","apartment_count","PropertyTypeChart","startDate","setColors","title","layout","enableLabel","keys","indexBy","animate","padding","newColors","PriceLabel","MapOverlayPerRegion","useMeanPrice","Grid","Column","computer","warning","MapOverlay","convertBoundsToRegionString","join","SplitPaneRight","setMapState","mapState","App","Container","githubCorner","direction","grid","leftPanel","rightPanel","Boolean","hostname","match","ErrorBoundary","getPlugin","createErrorBoundary","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d83a8789.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticAddon\":\"MeanPriceInFilterLocation_statisticAddon__ZZijL\",\"textGreen\":\"MeanPriceInFilterLocation_textGreen__1TxZ3\",\"textRed\":\"MeanPriceInFilterLocation_textRed__2oGI9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"grid\":\"App_grid__3DnSg\",\"leftPanel\":\"App_leftPanel__3Hl9k\",\"rightPanel\":\"App_rightPanel__kN-EW\",\"githubCorner\":\"App_githubCorner__3BLKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"SplitPaneLeft_content__4SUVj\",\"highlightedText\":\"SplitPaneLeft_highlightedText__2q005\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currency\":\"AreaOverview_currency__1aglq\",\"label\":\"AreaOverview_label__1Cauv\",\"amount\":\"AreaOverview_amount__KkYcy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shake\":\"Navigation_shake__1loJY\",\"bell-shake\":\"Navigation_bell-shake__28FvC\",\"notificationLink\":\"Navigation_notificationLink__dwBb-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceChart_container__b6m2Q\",\"tooltip\":\"PropertyPriceChart_tooltip__iGhsd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyPriceLine_container__3NyhK\",\"tooltip\":\"PropertyPriceLine_tooltip__1tDKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PropertyTypeChart_container__3smv6\",\"title\":\"PropertyTypeChart_title__1REaR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterToolbar_container__3xqZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MapOverlay_container__16kzn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SplitPaneRight_container__x3kzx\"};","import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: process.env.REACT_APP_API_ENDPOINT,\n  }),\n});\n\nexport default client;\n","import Bugsnag from '@bugsnag/js';\nimport BugsnagPluginReact from '@bugsnag/plugin-react';\n\nBugsnag.start({\n  releaseStage: process.env.NODE_ENV,\n  enabledReleaseStages: ['production'],\n  apiKey: process.env.REACT_APP_BUGSNAG_KEY,\n  plugins: [new BugsnagPluginReact()],\n  collectUserIp: false,\n});\n\nexport default Bugsnag;\n","import { atom } from 'recoil';\n\nexport const filterState = atom({\n  key: 'filters',\n  default: {\n    category: 'apartment',\n    type: 'sell',\n    location: 'latvia-riga-vecpilseta',\n    priceType: 'total',\n  },\n});\n","import axios from 'axios';\nimport { selector, selectorFamily } from 'recoil';\n\nimport { filterState } from './state';\n\nexport const getCategoryFilter = selector({\n  key: 'filters.category',\n  get: ({ get }) => get(filterState).category,\n  set: ({ get, set }, newValue) =>\n    set(filterState, {\n      ...get(filterState),\n      category: newValue,\n    }),\n});\nexport const getTypeFilter = selector({\n  key: 'filters.type',\n  get: ({ get }) => get(filterState).type,\n  set: ({ get, set }, newValue) =>\n    set(filterState, {\n      ...get(filterState),\n      type: newValue,\n    }),\n});\nexport const getLocationFilter = selector({\n  key: 'filters.location',\n  get: ({ get }) => get(filterState).location,\n  set: ({ get, set }, newValue) =>\n    set(filterState, {\n      ...get(filterState),\n      location: newValue,\n    }),\n});\nexport const getPriceTypeFilter = selector({\n  key: 'filters.priceType',\n  get: ({ get }) => get(filterState).priceType,\n  set: ({ get, set }, newValue) =>\n    set(filterState, {\n      ...get(filterState),\n      priceType: newValue,\n    }),\n});\n\nexport const getPrices = selectorFamily({\n  key: 'getPrices',\n  get: (filters) => async ({ get }) => {\n    const filterStr = encodeURIComponent(JSON.stringify(filters));\n\n    async function loadData() {\n      const { data } = await axios.get(\n        `https://static-api.brokalys.com/stats/monthly?discard=0.1&filters=${filterStr}`,\n      );\n      return data;\n    }\n\n    let runs = 0;\n\n    return new Promise(async function reloadPromise(resolve) {\n      const data = await loadData();\n\n      if (data.loadingResults === 0 || runs++ >= 3) {\n        return resolve(data);\n      }\n\n      setTimeout(\n        () => reloadPromise(resolve),\n        data.loadingResults <= 2 ? 1000 : 3000,\n      );\n    });\n  },\n});\n\nexport const getPricesInFilteredLocation = selector({\n  key: 'priceInFilteredLocation',\n  get: async ({ get }) => {\n    const location = get(getLocationFilter);\n    const type = get(getTypeFilter);\n    const category = get(getCategoryFilter);\n    return await get(\n      getPrices({ category, type, location_classificator: location }),\n    );\n  },\n});\n\nexport const getMeanPriceLastMonth = selector({\n  key: 'meanPriceLastMonth',\n  get: async ({ get }) => {\n    const location = get(getLocationFilter);\n    const type = get(getTypeFilter);\n    const category = get(getCategoryFilter);\n    const priceType = get(getPriceTypeFilter);\n    const { results: data } = await get(\n      getPrices({ category, type, location_classificator: location }),\n    );\n\n    const group = priceType === 'sqm' ? 'pricePerSqm' : 'price';\n\n    const {\n      [group]: { mean },\n    } = data[data.length - 1];\n\n    return {\n      price: mean,\n      change: {\n        mom: (1 - mean / data[data.length - 2][group].mean) * 100,\n        yoy: (1 - mean / data[data.length - 13][group].mean) * 100,\n      },\n    };\n  },\n});\n\nexport const getRentalYield = selector({\n  key: 'rentalYield',\n  get: async ({ get }) => {\n    const category = get(getCategoryFilter);\n    const location = get(getLocationFilter);\n    const priceType = get(getPriceTypeFilter);\n\n    const [{ results: sellData }, { results: rentData }] = await Promise.all([\n      get(\n        getPrices({ category, type: 'sell', location_classificator: location }),\n      ),\n      get(\n        getPrices({ category, type: 'rent', location_classificator: location }),\n      ),\n    ]);\n\n    const group = priceType === 'sqm' ? 'pricePerSqm' : 'price';\n\n    return (\n      (rentData[rentData.length - 1][group].mean /\n        sellData[sellData.length - 1][group].mean) *\n      100\n    );\n  },\n});\n","import { riga } from '@brokalys/location-json-schemas';\nimport React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { Dropdown, Menu } from 'semantic-ui-react';\nimport { transliterate } from 'transliteration';\n\nimport {\n  getCategoryFilter,\n  getLocationFilter,\n  getTypeFilter,\n  getPriceTypeFilter,\n} from 'store';\nimport styles from './FilterToolbar.module.css';\n\nconst locationOptions = riga.features.map((row) => ({\n  value: row.properties.id,\n  text: row.properties.name,\n}));\n\nconst categoryOptions = [\n  { value: 'apartment', text: 'Apartment' },\n  { value: 'house', text: 'House' },\n  { value: 'land', text: 'Land' },\n];\nconst typeOptions = [\n  { value: 'sell', text: 'Sell' },\n  { value: 'rent', text: 'Rent' },\n];\nconst priceTypeOptions = [\n  { value: 'total', text: 'Total price' },\n  { value: 'sqm', text: 'Price/sqm' },\n];\n\nfunction FilterToolbar() {\n  const [, setLocation] = useRecoilState(getLocationFilter);\n  const [, setCategory] = useRecoilState(getCategoryFilter);\n  const [, setType] = useRecoilState(getTypeFilter);\n  const [, setPriceType] = useRecoilState(getPriceTypeFilter);\n\n  /**\n   * Improved search operation to ignore all UTF-8 characters.\n   */\n  function onSearch(all, selected) {\n    const regexp = new RegExp(\n      transliterate(selected).replace(/[^a-z\\s-]/gi, ''),\n      'i',\n    );\n    return all.filter((row) => regexp.test(transliterate(row.text)));\n  }\n\n  return (\n    <div className={styles.container}>\n      <Menu secondary>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select location\"\n            search={onSearch}\n            selection\n            defaultValue=\"latvia-riga-vecpilseta\"\n            options={locationOptions}\n            onChange={(event, data) => setLocation(data.value)}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select category\"\n            fluid\n            selection\n            defaultValue=\"apartment\"\n            options={categoryOptions}\n            onChange={(event, data) => setCategory(data.value)}\n          />\n        </Menu.Item>\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select type\"\n            fluid\n            selection\n            defaultValue=\"sell\"\n            options={typeOptions}\n            onChange={(event, data) => setType(data.value)}\n          />\n        </Menu.Item>\n\n        <Menu.Item fitted>\n          <Dropdown\n            placeholder=\"Select price type\"\n            fluid\n            selection\n            defaultValue=\"total\"\n            options={priceTypeOptions}\n            onChange={(event, data) => setPriceType(data.value)}\n          />\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n}\n\nexport default FilterToolbar;\n","import FilterToolbar from './FilterToolbar';\n\nexport default FilterToolbar;\n","import React from 'react';\nimport { Button, Icon, Menu, Popup } from 'semantic-ui-react';\n\nimport styles from './Navigation.module.css';\n\nfunction Navigation() {\n  function onFeedbackClick() {\n    window.location.href = 'mailto:matiss@brokalys.com?subject=Feedback';\n  }\n\n  return (\n    <Menu secondary>\n      <Menu.Header>\n        <img src=\"https://brokalys.com/favicon.png\" alt=\"logo\" height=\"40px\" />\n      </Menu.Header>\n\n      <Menu.Item position=\"right\">\n        <Popup\n          content=\"Sign up for instant notifications about classifieds matching your parameters\"\n          inverted\n          position=\"bottom right\"\n          trigger={\n            <a\n              href=\"https://pinger.brokalys.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={styles.notificationLink}\n              data-testid=\"pinger-button\"\n            >\n              <Icon name=\"bell outline\" className={styles.shake} />\n            </a>\n          }\n        />\n      </Menu.Item>\n\n      {/*<Menu.Item fitted>\n        <Button basic animated=\"vertical\">\n          <Button.Content visible>Compare</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"crosshairs\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>*/}\n\n      <Menu.Item fitted>\n        <Button primary animated=\"vertical\" onClick={onFeedbackClick}>\n          <Button.Content visible>Give feedback</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"mail\" />\n          </Button.Content>\n        </Button>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Navigation;\n","import Navigation from './Navigation';\n\nexport default Navigation;\n","import { area, curveMonotoneX } from 'd3-shape';\nimport { Defs } from '@nivo/core';\nimport React, { useMemo } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport Bugsnag from 'bugsnag';\nimport { getPricesInFilteredLocation, getPriceTypeFilter } from 'store';\nimport styles from './PropertyPriceChart.module.css';\n\nfunction PropertyPriceChart() {\n  const priceType = useRecoilValue(getPriceTypeFilter);\n  const { results } = useRecoilValue(getPricesInFilteredLocation);\n\n  const data = useMemo(\n    () => [\n      {\n        id: 'Average Price',\n        data: results.map((row) => {\n          const prices = priceType === 'sqm' ? row.pricePerSqm : row.price;\n          return {\n            ...prices,\n\n            x: row.start_datetime.substr(0, 10),\n            y: prices.mean,\n          };\n        }),\n      },\n    ],\n    [results, priceType],\n  );\n\n  const maxPrice = data[0].data.reduce(\n    (carry, { max }) => (max > carry ? max : carry),\n    0,\n  );\n\n  function Price({ value }) {\n    return (\n      <span>\n        {Number(value).toLocaleString('en', {\n          minimumFractionDigits: 2,\n        })}{' '}\n        {priceType === 'sqm' ? (\n          <span>\n            EUR/m<sup>2</sup>\n          </span>\n        ) : (\n          'EUR'\n        )}\n      </span>\n    );\n  }\n\n  return (\n    <ResponsiveLine\n      data={data}\n      margin={{ top: 10, right: 10, bottom: 100, left: 50 }}\n      xScale={{\n        type: 'time',\n        format: '%Y-%m-%d',\n        precision: 'month',\n      }}\n      xFormat=\"time:%Y-%m-%d\"\n      yScale={{\n        type: 'linear',\n        stacked: false,\n        max: maxPrice * 1.05,\n      }}\n      sliceTooltip={({ slice }) => {\n        return (\n          <div className={styles.tooltip}>\n            {slice.points.map((point) => (\n              <div key={point.id}>\n                <div>\n                  <strong>{moment(point.data.x).format('YYYY-MM-DD')}</strong>\n                </div>\n                <div>\n                  <strong>Min:</strong> <Price value={point.data.min} />\n                </div>\n                <div>\n                  <strong>{point.serieId}:</strong>{' '}\n                  <Price value={point.data.yFormatted} />\n                </div>\n                <div>\n                  <strong>Max:</strong> <Price value={point.data.max} />\n                </div>\n                <hr />\n                <div>\n                  <strong>Mode:</strong> <Price value={point.data.mode} />\n                </div>\n                <div>\n                  <strong>Median:</strong> <Price value={point.data.median} />\n                </div>\n              </div>\n            ))}\n          </div>\n        );\n      }}\n      axisBottom={{\n        format: '%Y-%m',\n        tickValues: 'every 2 months',\n        tickRotation: -90,\n      }}\n      enablePoints={true}\n      curve=\"monotoneX\"\n      useMesh={true}\n      enableSlices=\"x\"\n      layers={[\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        AreaLayer,\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n      ]}\n    />\n  );\n}\n\nfunction PropertyPriceChartContainer() {\n  return (\n    <Segment basic className={styles.container}>\n      <ErrorBoundary\n        fallback={\n          <Message negative>\n            Failed loading chart data. Please try again later.\n          </Message>\n        }\n        onError={Bugsnag.notify}\n      >\n        <React.Suspense\n          fallback={\n            <Dimmer inverted active>\n              <Loader />\n            </Dimmer>\n          }\n        >\n          <PropertyPriceChart />\n        </React.Suspense>\n      </ErrorBoundary>\n    </Segment>\n  );\n}\n\nfunction AreaLayer({ series, xScale, yScale, innerHeight }) {\n  const areaGenerator = area()\n    .x((d) => xScale(d.data.x))\n    .y0((d) => yScale(d.data.min))\n    .y1((d) => yScale(d.data.max))\n    .curve(curveMonotoneX);\n\n  return (\n    <>\n      <Defs\n        defs={[\n          {\n            id: 'pattern',\n            type: 'patternLines',\n            background: 'transparent',\n            color: '#3daff7',\n            lineWidth: 1,\n            spacing: 6,\n            rotation: -45,\n          },\n        ]}\n      />\n      <path\n        d={areaGenerator(series[0].data)}\n        fill=\"url(#pattern)\"\n        fillOpacity={0.2}\n        stroke=\"#3daff7\"\n        strokeWidth={0.4}\n      />\n    </>\n  );\n}\n\nexport default PropertyPriceChartContainer;\n","import PropertyPriceChart from './PropertyPriceChart';\n\nexport default PropertyPriceChart;\n","import { Icon, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport Skeleton from 'react-loading-skeleton';\nimport { Statistic } from 'semantic-ui-react';\n\nimport { getMeanPriceLastMonth, getPriceTypeFilter } from 'store';\nimport styles from './MeanPriceInFilterLocation.module.css';\n\nfunction Description() {\n  return (\n    <>\n      <p>MoM: month-over-month</p>\n      <p>YoY: year-over-year</p>\n    </>\n  );\n}\n\nfunction MeanPriceInFilterLocation() {\n  const priceType = useRecoilValue(getPriceTypeFilter);\n  const data = useRecoilValue(getMeanPriceLastMonth);\n\n  const mean = data.price;\n  const momChange = data.change.mom;\n  const yoyChange = data.change.yoy;\n\n  return (\n    <>\n      <Statistic.Value>\n        <div className={styles.statisticAddon}>\n          {isFinite(momChange) && (\n            <div>\n              <span\n                className={momChange < 0 ? styles.textGreen : styles.textRed}\n              >\n                {momChange < 0 ? '+' : ''}\n                {-momChange.toFixed(2)}%\n              </span>{' '}\n              MoM\n            </div>\n          )}\n          {isFinite(yoyChange) && (\n            <div>\n              <span\n                className={yoyChange < 0 ? styles.textGreen : styles.textRed}\n              >\n                {yoyChange < 0 ? '+' : ''}\n                {-yoyChange.toFixed(2)}%\n              </span>{' '}\n              YoY\n            </div>\n          )}\n        </div>\n\n        {parseInt(mean, 10).toLocaleString('en')}\n      </Statistic.Value>\n      <Statistic.Label>\n        Average Price (EUR\n        {priceType === 'sqm' ? (\n          <span>\n            /m<sup>2</sup>\n          </span>\n        ) : (\n          ''\n        )}\n        ) <Tooltip content={<Description />} children={<Icon icon=\"help\" />} />\n      </Statistic.Label>\n    </>\n  );\n}\n\nfunction MeanPriceInFilterLocationContainer() {\n  return (\n    <Statistic>\n      <React.Suspense fallback={<Skeleton height={60} width={240} />}>\n        <MeanPriceInFilterLocation />\n      </React.Suspense>\n    </Statistic>\n  );\n}\n\nexport default MeanPriceInFilterLocationContainer;\n","import MeanPriceInFilterLocation from './MeanPriceInFilterLocation';\n\nexport default MeanPriceInFilterLocation;\n","import { Icon, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport Skeleton from 'react-loading-skeleton';\nimport { Statistic } from 'semantic-ui-react';\n\nimport { getRentalYield } from 'store';\n\nfunction RentalYieldInFilterLocation() {\n  const data = useRecoilValue(getRentalYield);\n\n  return <Statistic.Value>{data.toFixed(2)}%</Statistic.Value>;\n}\n\nfunction Description() {\n  return (\n    <>\n      <p>\n        How much of the invested capital can I expect to make back each year?\n      </p>\n      <p>A bigger number is better for landlords; a smaller - for renters.</p>\n      <p>Calculation: average rent price / sell price in the last month</p>\n    </>\n  );\n}\n\nfunction RentalYieldInFilterLocationContainer() {\n  return (\n    <Statistic>\n      <React.Suspense fallback={<Skeleton height={42} />}>\n        <RentalYieldInFilterLocation />\n      </React.Suspense>\n      <Statistic.Label>\n        Rental Yield{' '}\n        <Tooltip content={<Description />} children={<Icon icon=\"help\" />} />\n      </Statistic.Label>\n    </Statistic>\n  );\n}\n\nexport default RentalYieldInFilterLocationContainer;\n","import RentalYieldInFilterLocation from './RentalYieldInFilterLocation';\n\nexport default RentalYieldInFilterLocation;\n","import { riga } from '@brokalys/location-json-schemas';\nimport React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { Header, Message, Statistic } from 'semantic-ui-react';\n\nimport Bugsnag from 'bugsnag';\nimport FilterToolbar from 'components/FilterToolbar';\nimport Navigation from 'components/Navigation';\nimport PropertyPriceChart from 'components/PropertyPriceChart';\nimport MeanPrice from 'components/Statistics/MeanPriceInFilterLocation';\nimport RentalYield from 'components/Statistics/RentalYieldInFilterLocation';\nimport { filterState } from 'store';\n\nimport styles from './SplitPaneLeft.module.css';\n\nfunction SplitPaneLeft() {\n  const [filters] = useRecoilState(filterState);\n  const locationName = riga.features.find(\n    (row) => row.properties.id === filters.location,\n  ).properties.name;\n\n  return (\n    <div className={styles.container}>\n      <Navigation />\n\n      <div className={styles.content}>\n        <Header as=\"h2\">\n          Average Prices in{' '}\n          <span className={styles.highlightedText}>{locationName}</span>\n        </Header>\n\n        <FilterToolbar />\n        <PropertyPriceChart />\n\n        <div>\n          <Header as=\"h3\">Last Month</Header>\n\n          <ErrorBoundary\n            fallback={\n              <Message negative>\n                Failed loading the data. Please try again later.\n              </Message>\n            }\n            onError={Bugsnag.notify}\n          >\n            <Statistic.Group size=\"small\">\n              <MeanPrice />\n              <RentalYield />\n            </Statistic.Group>\n          </ErrorBoundary>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SplitPaneLeft;\n","import SplitPaneLeft from './SplitPaneLeft';\n\nexport default SplitPaneLeft;\n","import React, { useState } from 'react';\n\nconst BuildingContext = React.createContext();\n\nexport const MIN_ZOOM_FOR_BUILDINGS = 17;\n\nexport function BuildingContextProvider(props) {\n  const [state, setState] = useState({\n    setActiveBuilding,\n    activeBuilding: undefined,\n\n    buildingCount: 0,\n    setBuildingCount,\n\n    loading: false,\n    error: undefined,\n    setLoading,\n    setError,\n  });\n\n  function setActiveBuilding(building) {\n    setState((current) => {\n      if (current.activeBuilding === building) {\n        return current;\n      }\n\n      return {\n        ...current,\n        activeBuilding: building,\n      };\n    });\n  }\n\n  function setBuildingCount(buildingCount) {\n    setStateSlice('buildingCount', buildingCount);\n  }\n\n  function setLoading(loading) {\n    setStateSlice('loading', loading);\n  }\n\n  function setError(error) {\n    setStateSlice('error', error);\n  }\n\n  function setStateSlice(sliceName, sliceValue) {\n    setState((current) => ({\n      ...current,\n      [sliceName]: sliceValue,\n    }));\n  }\n\n  return (\n    <BuildingContext.Provider value={state}>\n      {props.children}\n    </BuildingContext.Provider>\n  );\n}\n\nexport default BuildingContext;\n","import React from 'react';\n\nconst MapContext = React.createContext();\n\nexport default MapContext;\n","import { useContext } from 'react';\n\nimport BuildingContext from 'context/BuildingContext';\n\nexport default function useActiveBuilding() {\n  const context = useContext(BuildingContext);\n\n  return [context.activeBuilding, context.setActiveBuilding];\n}\n","import { useEffect, useState } from 'react';\nimport { useDebounce, useDebouncedCallback } from 'use-debounce';\nimport { useLazyQuery } from '@apollo/client';\n\nexport default function useDebouncedQuery(query, nextConfig, time = 1000) {\n  const nextConfigStr = JSON.stringify(nextConfig);\n  const [debouncedIsLoading, setDebouncedLoading] = useState(true);\n  const [previousData, setPreviousData] = useState(undefined);\n  const [config] = useDebounce(nextConfig, time, {\n    equalityFn: (prev, next) => JSON.stringify(prev) === JSON.stringify(next),\n  });\n\n  const [performLazyQuery, { loading, error, data }] = useLazyQuery(\n    query,\n    config,\n  );\n  const { callback: performDebouncedQuery } = useDebouncedCallback(() => {\n    performLazyQuery();\n  }, time);\n\n  useEffect(() => {\n    setDebouncedLoading(true);\n    performDebouncedQuery();\n  }, [nextConfigStr, performDebouncedQuery]);\n\n  useEffect(() => {\n    if (loading === false && data) {\n      setDebouncedLoading(false);\n      setPreviousData(data);\n    }\n  }, [loading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    error,\n    loading: loading || (debouncedIsLoading && !error),\n    data: data || previousData,\n  };\n}\n","import { gql } from '@apollo/client';\nimport { useContext, useEffect } from 'react';\n\nimport BuildingContext from 'context/BuildingContext';\nimport MapContext from 'context/MapContext';\nimport useDebouncedQuery from 'hooks/use-debounced-query';\n\nconst GET_BUILDINGS_AND_PROPERTIES = gql`\n  query($region: String!) {\n    buildings(bounds: $region) {\n      id\n      bounds\n      properties {\n        results {\n          category\n          type\n          rent_type\n          price\n          price_per_sqm\n          rooms\n          area\n          floor\n          published_at\n        }\n      }\n    }\n  }\n`;\n\nexport default function useRegionBuildings() {\n  const { region } = useContext(MapContext);\n  const { setBuildingCount, setError, setLoading } = useContext(\n    BuildingContext,\n  );\n\n  const { loading, error, data } = useDebouncedQuery(\n    GET_BUILDINGS_AND_PROPERTIES,\n    {\n      variables: { region },\n    },\n    1000,\n  );\n\n  const buildings = data ? data.buildings : [];\n\n  useEffect(() => {\n    setLoading(loading);\n  }, [setLoading, loading]);\n\n  useEffect(() => {\n    setError(error);\n  }, [setError, error]);\n\n  useEffect(() => {\n    setBuildingCount(buildings.length);\n  }, [setBuildingCount, buildings.length]);\n\n  return {\n    loading,\n    error,\n    data: buildings,\n  };\n}\n","import { Polygon } from '@react-google-maps/api';\n\nimport useActiveBuilding from 'hooks/use-active-building';\nimport useRegionBuildings from 'hooks/api/use-region-buildings';\n\nexport default function BuildingPolygons() {\n  const [activeBuilding, setActiveBuilding] = useActiveBuilding();\n  const { data: buildings } = useRegionBuildings();\n\n  const onBuildingClick = (building) => {\n    setActiveBuilding(building === activeBuilding ? undefined : building);\n  };\n\n  return buildings\n    .filter(({ properties }) => properties.results.length > 0)\n    .map((building) => (\n      <Polygon\n        key={building.id}\n        onClick={() => onBuildingClick(building)}\n        paths={building.bounds.split(', ').map((row) => {\n          const [lat, lng] = row.split(' ');\n          return { lat: parseFloat(lat), lng: parseFloat(lng) };\n        })}\n        options={\n          activeBuilding && activeBuilding.id === building.id\n            ? { strokeColor: 'green', fillColor: 'green' }\n            : { strokeColor: 'black', fillColor: 'black' }\n        }\n      />\n    ));\n}\n","import React, { useContext } from 'react';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\n\nimport { MIN_ZOOM_FOR_BUILDINGS } from 'context/BuildingContext';\nimport MapContext from 'context/MapContext';\nimport useActiveBuilding from 'hooks/use-active-building';\nimport BuildingPolygons from './components/BuildingPolygons';\n\nconst center = {\n  lat: 56.94,\n  lng: 24.096752456107843,\n};\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n};\n\nfunction Map(props) {\n  const [map, setMap] = React.useState(null);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_KEY,\n  });\n\n  const context = useContext(MapContext);\n  const [, setActiveBuilding] = useActiveBuilding();\n\n  /**\n   * Ignore the overlay when doing data lookups by region.\n   */\n  function onBoundsChanged() {\n    const mapHeight = map.getDiv().clientHeight;\n    const overlayHeight = document.getElementById('map-overlay').offsetTop;\n    const percentage = 1 - overlayHeight / mapHeight;\n\n    const newBounds = {\n      nw: {\n        lat:\n          map.getBounds().getSouthWest().lat() +\n          (map.getBounds().getNorthEast().lat() -\n            map.getBounds().getSouthWest().lat()) *\n            percentage,\n        lng: map.getBounds().getNorthEast().lng(),\n      },\n      ne: {\n        lat: map.getBounds().getNorthEast().lat(),\n        lng: map.getBounds().getNorthEast().lng(),\n      },\n\n      sw: {\n        lat:\n          map.getBounds().getSouthWest().lat() +\n          (map.getBounds().getNorthEast().lat() -\n            map.getBounds().getSouthWest().lat()) *\n            percentage,\n        lng: map.getBounds().getSouthWest().lng(),\n      },\n      se: {\n        lat: map.getBounds().getNorthEast().lat(),\n        lng: map.getBounds().getSouthWest().lng(),\n      },\n    };\n\n    context.setBounds(newBounds);\n    context.setZoom(map.getZoom());\n    setActiveBuilding(undefined);\n  }\n\n  const renderMap = () => {\n    const options = {\n      zoomControlOptions: {\n        position: window.google.maps.ControlPosition.RIGHT_TOP,\n      },\n      rotateControl: false,\n      scaleControl: false,\n      streetViewControl: false,\n      panControl: false,\n      fullscreenControl: false,\n    };\n\n    return (\n      <GoogleMap\n        options={options}\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={context.zoom}\n        onLoad={setMap}\n        onBoundsChanged={onBoundsChanged}\n      >\n        {context.zoom >= MIN_ZOOM_FOR_BUILDINGS && <BuildingPolygons />}\n      </GoogleMap>\n    );\n  };\n\n  if (loadError) {\n    return <div>Failed loading the map. Please try again later.</div>;\n  }\n\n  return isLoaded ? renderMap() : <div>Loading...</div>;\n}\n\nexport default React.memo(Map);\n","import Map from './Map';\n\nexport default Map;\n","import React, { useContext } from 'react';\nimport { Dimmer, Loader, Message, Table } from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport BuildingContext from 'context/BuildingContext';\nimport useActiveBuilding from 'hooks/use-active-building';\n\nconst RENT_TYPE_SUFFIX = {\n  yearly: '/y',\n  monthly: '/m',\n  weekly: '/w',\n  daily: '/d',\n};\n\nfunction MapOverlayPerBuilding() {\n  const [activeBuilding] = useActiveBuilding();\n\n  if (!activeBuilding) {\n    return (\n      <Message info>\n        <Message.Header>\n          Interested to see details of a specific property?\n        </Message.Header>\n        <p>\n          Click on one of the highlighted properties to see the historical data\n          for this property.\n        </p>\n      </Message>\n    );\n  }\n\n  return (\n    <>\n      <Message info>\n        <p>\n          Data might be inaccurate. Some people provide wrong locations for\n          their classifieds.\n        </p>\n      </Message>\n      <Table\n        basic=\"very\"\n        singleLine\n        selectable\n        compact=\"very\"\n        textAlign=\"right\"\n      >\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell textAlign=\"left\">Category</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"left\">Type</Table.HeaderCell>\n            <Table.HeaderCell>Total price</Table.HeaderCell>\n            <Table.HeaderCell>SQM Price</Table.HeaderCell>\n            <Table.HeaderCell>Area</Table.HeaderCell>\n            <Table.HeaderCell>Rooms</Table.HeaderCell>\n            <Table.HeaderCell>Floor</Table.HeaderCell>\n            <Table.HeaderCell>Published At</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {activeBuilding.properties.results.map((row, index) => (\n            <Table.Row key={index}>\n              <Table.Cell textAlign=\"left\">{row.category}</Table.Cell>\n              <Table.Cell textAlign=\"left\">{row.type}</Table.Cell>\n              <Table.Cell>\n                {row.price.toLocaleString()} €\n                {row.type === 'rent' && RENT_TYPE_SUFFIX[row.rent_type]}\n              </Table.Cell>\n              <Table.Cell>\n                {row.price_per_sqm && (\n                  <>\n                    {Math.round(row.price_per_sqm).toLocaleString()} €/m\n                    <sup>2</sup>\n                  </>\n                )}\n              </Table.Cell>\n              <Table.Cell>\n                {row.area && (\n                  <>\n                    {row.area.toLocaleString()} m<sup>2</sup>\n                  </>\n                )}\n              </Table.Cell>\n              <Table.Cell>{row.rooms}</Table.Cell>\n              <Table.Cell>{row.floor}</Table.Cell>\n              <Table.Cell>\n                {row.published_at\n                  ? moment(row.published_at).format('YYYY-MM-DD HH:mm')\n                  : 'Before 2018'}\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </>\n  );\n}\n\nexport default function MapOverlayPerBuildingContainer() {\n  const context = useContext(BuildingContext);\n\n  return (\n    <>\n      <Dimmer inverted active={context.loading}>\n        <Loader content=\"Loading new buildings..\" />\n      </Dimmer>\n      {context.error && (\n        <Message negative>\n          An unexpected error occured when attempting to fetch the data. Try\n          again later.\n        </Message>\n      )}\n\n      <MapOverlayPerBuilding />\n    </>\n  );\n}\n","import { riga } from '@brokalys/location-json-schemas';\nimport { useContext, useMemo } from 'react';\nimport polygonsOverlapping from 'polygon-overlap';\n\nimport MapContext from 'context/MapContext';\n\nexport default function useRegionParams() {\n  const map = useContext(MapContext);\n  const regionPolygon = useMemo(() => {\n    return [\n      [map.bounds.nw.lng, map.bounds.nw.lat],\n      [map.bounds.ne.lng, map.bounds.ne.lat],\n      [map.bounds.sw.lng, map.bounds.sw.lat],\n      [map.bounds.se.lng, map.bounds.se.lat],\n    ];\n  }, [map.bounds]);\n\n  const locations = useMemo(() => {\n    return riga.features\n      .filter((feature) =>\n        polygonsOverlapping(feature.geometry.coordinates[0], regionPolygon),\n      )\n      .map((feature) => feature.properties.id);\n  }, [regionPolygon]);\n\n  return {\n    region: [map.region],\n    locations: locations.length > 10 ? undefined : locations,\n  };\n}\n","import { gql } from '@apollo/client';\n\nimport useDebouncedQuery from 'hooks/use-debounced-query';\nimport useRegionParams from 'hooks/use-region-params';\n\nconst GET_MEAN_PRICE = gql`\n  query(\n    $type: String!\n    $date: String!\n    $region: [String!]!\n    $locations: [String!]\n  ) {\n    properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price(discard: 0.1) {\n          mean\n        }\n      }\n    }\n  }\n`;\n\nexport default function useMeanPrice(type, startDate) {\n  const { region, locations } = useRegionParams();\n\n  const { loading, error, data } = useDebouncedQuery(\n    GET_MEAN_PRICE,\n    {\n      variables: {\n        type: type,\n        date: startDate,\n        region,\n        locations,\n      },\n    },\n    1000,\n  );\n\n  return {\n    loading: loading || !data,\n    error,\n    data,\n  };\n}\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nimport styles from './AreaOverview.module.css';\n\nfunction AreaOverview({ children, year }) {\n  return (\n    <div>\n      <Header as=\"h4\">Selected Area</Header>\n      <div>\n        <div className={styles.currency}>€</div>\n        <div className={styles.amount}>{children}</div>\n        <div className={styles.label}>Average Price last 30 days</div>\n      </div>\n    </div>\n  );\n}\n\nexport default AreaOverview;\n","import React, { useMemo } from 'react';\nimport { Dimmer, Loader, Segment } from 'semantic-ui-react';\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport { gql } from '@apollo/client';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport useDebouncedQuery from 'hooks/use-debounced-query';\nimport useRegionParams from 'hooks/use-region-params';\nimport styles from './PropertyPriceLine.module.css';\n\nconst moment = extendMoment(Moment);\nconst range = moment().range(\n  moment().utc().startOf('day').subtract(30, 'days'),\n  new Date(),\n);\nconst dates = Array.from(range.by('day', { excludeEnd: true }));\n\nconst GET_MEAN_PRICE = (dates) => gql`\n  query(\n    $type: String!\n    $region: [String!]!\n    $locations: [String!]\n  ) {\n    ${dates.map(\n      (date, id) => `\n      row_${id}: properties(\n        filter: {\n          type: { eq: $type }\n          published_at: {\n            gte: \"${date.toISOString()}\"\n            lte: \"${date.clone().endOf('day').toISOString()}\"\n          }\n          location_classificator: { in: $locations }\n          region: { in: $region }\n        }\n      ) {\n        summary {\n          price(discard: 0.1) {\n            mean\n          }\n        }\n      }\n    `,\n    )}\n  }\n`;\n\nfunction transformResponse(data) {\n  if (!data) {\n    return [];\n  }\n\n  return dates.map((date, index) => {\n    if (!data) {\n      return {};\n    }\n\n    return {\n      x: date.format('YYYY-MM-DD'),\n      y: data[`row_${index}`].summary.price.mean,\n    };\n  });\n}\n\nfunction PropertyPriceLine({ type }) {\n  const { region, locations } = useRegionParams();\n  const { loading, data: custom } = useDebouncedQuery(\n    GET_MEAN_PRICE(dates),\n    {\n      variables: {\n        type,\n        region,\n        locations,\n      },\n    },\n    2000,\n  );\n\n  const data = useMemo(\n    () => [\n      {\n        id: 'Average price',\n        data: transformResponse(custom),\n      },\n    ],\n    [custom],\n  );\n\n  return (\n    <Segment basic className={styles.container}>\n      <Dimmer inverted active={loading}>\n        <Loader />\n      </Dimmer>\n\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 5, right: 5, bottom: 5, left: 5 }}\n        xScale={{\n          type: 'time',\n          format: '%Y-%m-%d',\n          precision: 'day',\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          type: 'linear',\n          stacked: false,\n        }}\n        sliceTooltip={({ slice }) => {\n          return (\n            <div className={styles.tooltip}>\n              {slice.points.map((point) => (\n                <div key={point.id}>\n                  <div>\n                    <strong>{moment(point.data.x).format('YYYY-MM-DD')}</strong>\n                  </div>\n                  <div>\n                    <strong>{point.serieId}:</strong>{' '}\n                    {Number(point.data.yFormatted).toLocaleString('en', {\n                      minimumFractionDigits: 2,\n                    })}{' '}\n                    EUR\n                  </div>\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        colors={['#543193']}\n        axisLeft={{ enable: false, tickSize: 0 }}\n        axisBottom={false}\n        enableGridX={false}\n        enableGridY={false}\n        enablePoints={false}\n        curve=\"natural\"\n        useMesh={false}\n        enableSlices=\"x\"\n      />\n    </Segment>\n  );\n}\n\nexport default PropertyPriceLine;\n","import React, { useState } from 'react';\nimport { gql } from '@apollo/client';\nimport { Dimmer, Header, Loader, Segment } from 'semantic-ui-react';\nimport { ResponsiveBar } from '@nivo/bar';\n\nimport useDebouncedQuery from 'hooks/use-debounced-query';\nimport useRegionParams from 'hooks/use-region-params';\nimport styles from './PropertyTypeChart.module.css';\n\nconst defaultColor = '#543193';\nconst selectedColor = '#c0ace3';\nconst defaultColors = [defaultColor, defaultColor, defaultColor];\n\nconst GET_MEAN_PRICE = gql`\n  query(\n    $type: String!\n    $date: String!\n    $region: [String!]!\n    $locations: [String!]\n  ) {\n    mean_price: properties(\n      filter: {\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        price(discard: 0.1) {\n          mean\n        }\n      }\n    }\n\n    apartment_count: properties(\n      filter: {\n        category: { eq: \"APARTMENT\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    house_count: properties(\n      filter: {\n        category: { eq: \"HOUSE\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n\n    land_count: properties(\n      filter: {\n        category: { eq: \"LAND\" }\n        type: { eq: $type }\n        published_at: { gte: $date }\n        location_classificator: { in: $locations }\n        region: { in: $region }\n      }\n    ) {\n      summary {\n        count\n      }\n    }\n  }\n`;\n\nfunction normalizeChartData(data) {\n  return [\n    {\n      category: 'Land',\n      value: data ? data.land_count.summary.count : 0,\n    },\n    {\n      category: 'House',\n      value: data ? data.house_count.summary.count : 0,\n    },\n    {\n      category: 'Apartment',\n      value: data ? data.apartment_count.summary.count : 0,\n    },\n  ];\n}\n\nfunction PropertyTypeChart({ type, startDate }) {\n  const { region, locations } = useRegionParams();\n\n  const { loading, data } = useDebouncedQuery(\n    GET_MEAN_PRICE,\n    {\n      variables: {\n        type,\n        date: startDate,\n        region,\n        locations,\n      },\n    },\n    1000,\n  );\n  const [colors, setColors] = useState(defaultColors);\n\n  function onClick({ index }) {\n    setColors((state) => {\n      if (state[index] === selectedColor) {\n        return defaultColors;\n      }\n\n      const newColors = [...defaultColors];\n      newColors[index] = selectedColor;\n      return newColors;\n    });\n  }\n\n  return (\n    <div>\n      <Header as=\"h4\" className={styles.title}>\n        Property type distribution\n      </Header>\n      <Segment basic className={styles.container}>\n        <Dimmer inverted active={loading}>\n          <Loader />\n        </Dimmer>\n\n        <ResponsiveBar\n          data={normalizeChartData(data)}\n          layout=\"horizontal\"\n          enableGridY={false}\n          enableLabel={false}\n          axisLeft={{ tickSize: 0 }}\n          axisBottom={false}\n          keys={['value']}\n          indexBy=\"category\"\n          margin={{ top: 0, right: 0, bottom: 0, left: 60 }}\n          animate={true}\n          colors={colors}\n          padding={0.4}\n          onClick={onClick}\n        />\n      </Segment>\n    </div>\n  );\n}\n\nexport default PropertyTypeChart;\n","import React, { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { Grid, Header, Message } from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport useMeanPrice from 'hooks/api/use-mean-price';\nimport useRegionParams from 'hooks/use-region-params';\nimport AreaOverview from './components/AreaOverview';\nimport PropertyPriceLine from './components/PropertyPriceLine';\nimport PropertyTypeChart from './components/PropertyTypeChart';\n\nfunction PriceLabel({ price }) {\n  if (!price) {\n    return 'Unknown';\n  }\n\n  return parseInt(price, 10).toLocaleString('en');\n}\n\nexport default function MapOverlayPerRegion() {\n  const { locations } = useRegionParams();\n  const [startDate] = useState(\n    moment().subtract(30, 'days').format('YYYY-MM-DD'),\n  );\n  const [type] = useState('sell'); // @todo: dynamic\n  const { loading, error, data } = useMeanPrice(type, startDate);\n\n  if (!locations || !locations.length) {\n    return (\n      <Message warning>\n        <Message.Header>\n          Brokalys cannot give an overview for this region\n        </Message.Header>\n        <p>\n          <strong>Why?</strong> you might be outside Riga or you have zoomed out\n          too much\n        </p>\n        <p>\n          Interested to see data on a specific building in the countryside or\n          Riga? Zoom in and click on it.\n        </p>\n      </Message>\n    );\n  }\n\n  if (error) {\n    return (\n      <Header as=\"h4\">\n        An unexpected error occured when attempting to fetch the data. Try again\n        later.\n      </Header>\n    );\n  }\n\n  return (\n    <Grid>\n      <Grid.Column computer={8}>\n        <AreaOverview>\n          {loading ? (\n            <Skeleton />\n          ) : (\n            <PriceLabel price={data.properties.summary.price.mean} />\n          )}\n        </AreaOverview>\n\n        <PropertyPriceLine type={type} />\n      </Grid.Column>\n      <Grid.Column computer={8}>\n        <PropertyTypeChart type={type} startDate={startDate} />\n      </Grid.Column>\n    </Grid>\n  );\n}\n","import React, { useContext } from 'react';\n\nimport MapContext from 'context/MapContext';\nimport { MIN_ZOOM_FOR_BUILDINGS } from 'context/BuildingContext';\nimport MapOverlayPerBuilding from './MapOverlayPerBuilding';\nimport MapOverlayPerRegion from './MapOverlayPerRegion';\nimport styles from './MapOverlay.module.css';\n\nfunction MapOverlay() {\n  const { zoom } = useContext(MapContext);\n\n  return (\n    <div className={styles.container} id=\"map-overlay\">\n      {zoom >= MIN_ZOOM_FOR_BUILDINGS ? (\n        <MapOverlayPerBuilding />\n      ) : (\n        <MapOverlayPerRegion />\n      )}\n    </div>\n  );\n}\n\nexport default MapOverlay;\n","import MapOverlay from './MapOverlay';\n\nexport default MapOverlay;\n","import React, { useState } from 'react';\n\nimport Map from 'components/Map';\nimport MapOverlay from 'components/MapOverlay';\nimport { BuildingContextProvider } from 'context/BuildingContext';\nimport MapContext from 'context/MapContext';\n\nimport styles from './SplitPaneRight.module.css';\n\nfunction convertBoundsToRegionString(bounds) {\n  const parts = [\n    [bounds.ne.lat, bounds.ne.lng].join(' '),\n    [bounds.nw.lat, bounds.nw.lng].join(' '),\n    [bounds.sw.lat, bounds.sw.lng].join(' '),\n    [bounds.se.lat, bounds.se.lng].join(' '),\n    [bounds.ne.lat, bounds.ne.lng].join(' '),\n  ];\n  return parts.join(', ');\n}\n\nfunction SplitPaneRight() {\n  const [mapState, setMapState] = useState({\n    setBounds,\n    setZoom,\n    bounds: {\n      ne: {},\n      nw: {},\n      se: {},\n      sw: {},\n    },\n    zoom: 15,\n    region: '',\n  });\n\n  function setBounds(bounds) {\n    setMapState((state) => ({\n      ...state,\n      bounds,\n      region: convertBoundsToRegionString(bounds),\n    }));\n  }\n\n  function setZoom(zoom) {\n    setMapState((state) => ({\n      ...state,\n      zoom,\n    }));\n  }\n\n  return (\n    <div className={styles.container}>\n      <MapContext.Provider value={mapState}>\n        <BuildingContextProvider>\n          <Map />\n          <MapOverlay />\n        </BuildingContextProvider>\n      </MapContext.Provider>\n    </div>\n  );\n}\n\nexport default SplitPaneRight;\n","import SplitPaneRight from './SplitPaneRight';\n\nexport default SplitPaneRight;\n","import React from 'react';\nimport GithubCorner from 'react-github-corner';\nimport { Container, Grid } from 'semantic-ui-react';\n\nimport SplitPaneLeft from 'containers/SplitPaneLeft';\nimport SplitPaneRight from 'containers/SplitPaneRight';\n\nimport styles from './App.module.css';\n\nfunction App(props) {\n  return (\n    <Container fluid className={styles.container}>\n      <GithubCorner\n        className={styles.githubCorner}\n        href=\"https://github.com/brokalys/map-app\"\n        direction=\"left\"\n      />\n\n      <Grid className={styles.grid}>\n        <Grid.Column computer={9} className={styles.leftPanel}>\n          <SplitPaneLeft />\n        </Grid.Column>\n        <Grid.Column computer={7} className={styles.rightPanel}>\n          <SplitPaneRight />\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ApolloProvider } from '@apollo/client';\n\nimport client from './apollo-client';\nimport App from './App.jsx';\nimport Bugsnag from './bugsnag';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nconst ErrorBoundary = Bugsnag.getPlugin('react').createErrorBoundary(React);\n\nReactDOM.render(\n  <ErrorBoundary>\n    <RecoilRoot>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </RecoilRoot>\n  </ErrorBoundary>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}